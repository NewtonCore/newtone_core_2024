{"version":3,"file":"static/js/9070.eb0ccba6.chunk.js","mappings":"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","sources":["components/pages/applicant/Settings/pagecomponents/ChangePassword.js","components/pages/company/CompanyChangePass/CompanyChangePass.js"],"sourcesContent":["import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { toast } from \"react-toastify\";\nimport {\n  changePassword,\n  handleOnChangeTextInput,\n  handleValidateFields,\n  toggleShowPassword,\n} from \"../../../../../app-redux/features/Auth/authSlice\";\nimport { FORM_INPUTS } from \"../../../../../constants/FormInputs\";\nimport {\n  checkPropertiesIsEmpty,\n  ExtractFieldsFromFormData,\n  generateUniqueID,\n} from \"../../../../../constants/utils\";\nimport AppButton from \"../../../../atoms/AppButton/AppButton\";\nimport AppCol from \"../../../../organisms/AppCol/AppCol\";\nimport AppRow from \"../../../../organisms/AppRow/AppRow\";\nimport FormInputRenderer from \"../../../../organisms/FormRenderer/FormInputRenderer\";\nimport WhiteBgDiv from \"../../../../organisms/WhiteBgDiv/WhiteBgDiv\";\n\nfunction ChangePassForm() {\n  const authData = useSelector((state) => state.auth);\n  const dispatch = useDispatch();\n  let { changePasswordForm ,passwordIsVisible} = authData;\n\n  let handleTextChange = (e, meta) => {\n    let { value, name } = e.target;\n\n    const {  RowKey, ChildKey } = meta;\n\n    dispatch(\n      handleOnChangeTextInput({\n        state: \"change_password\",\n        valueToUpdate: value,\n        KeyName: name,\n        RowKey: RowKey,\n        ChildKey,\n      })\n    );\n  };\n\n  const toggleRevealPassword = () => {\n    dispatch(toggleShowPassword());\n  };\n\n  let handleOnBlur = (e, meta) => {};\n\n  let changePasswordFunc = () => {\n    dispatch(handleValidateFields({ state: \"change_password\" }));\n\n    //extract the fields only that are required\n\n    let change_password_object = ExtractFieldsFromFormData(\n      changePasswordForm,\n      true\n    );\n\n    console.log({change_password_object})\n    //\n    let check_if_empty = checkPropertiesIsEmpty(change_password_object);\n\n    if (check_if_empty) {\n      toast.warning(\"Kindly fill in the required fields\");\n      return 0;\n    }\n\n    dispatch(changePassword({ data: changePasswordForm })).unwrap()\n    .then(res=>{\n      toast.success(\"Password has been changed\")\n      \n    }).catch(err=>{\n      toast.error(err)\n    })\n  };\n  return (\n    <div className=\"change_pass\">\n      <>\n        {Array.isArray(changePasswordForm) &&\n          changePasswordForm.map((form, form_index) => {\n            return (\n              <AppRow className=\"gx-3\" key={form.id}>\n                {form.children.map((child, child_index) => {\n                  if (child.hidden !== true) {\n                    return (\n                      <AppCol size={12 / form.colums} key={child.id}>\n                        {/* {JSON.stringify(child)} */}\n                        <FormInputRenderer\n                          onBlurValidation={\n                            child.type === \"text-input\" ||\n                            child.type === \"text-area\" || child.type === \"password\"\n                              ? handleOnBlur\n                              : {}\n                          }\n                          handleChange={\n                            child.type === \"text-input\" ||\n                            child.type === \"text-area\" || child.type === \"password\"\n                              ? handleTextChange\n                              : {}\n                          }\n                          type={child.type}\n                          metaData={{\n                            toggleRevealPassword:toggleRevealPassword,\n                            passwordIsVisible:passwordIsVisible,\n                            meta: { RowKey: form_index, ChildKey: child_index },\n                            label: child.label,\n                            value: child.value,\n                            name: child.name,\n                            input_type: child.input_type,\n                            // className: child.hasError && classStyle.red_input,\n                            // inputId: \"settings_input_fields\",\n                            data: child.data,\n                            type: child.input_type,\n                            isRequired: child.isRequired,\n                            maxlength: child.maxlength,\n                            errorMessage:\n                              child.type === \"text-input\" ||\n                              (child.type === \"text-area\" &&\n                                child.errorMessage),\n                          }}\n                        ></FormInputRenderer>\n                      </AppCol>\n\n                      // </div>\n                    );\n                  }\n                })}\n              </AppRow>\n            );\n          })}\n\n        {/* {changePasswordForm.map((field) => {\n              return (\n                <FormInputRenderer\n                  handleChange={handleTextChange}\n                  key={generateUniqueID()}\n                  type=\"text-input\"\n                  metaData={{\n                    meta: { RowKey: form_index, ChildKey: child_index },\n                    label: field.label,\n                    inputId: \"settings_input_fields\",\n                  }}\n                />\n              );\n            })} */}\n        <AppCol style={{ padding: 0 }}>\n          <AppButton\n            onClick={() => changePasswordFunc()}\n            size=\"small\"\n            label=\"Save Password\"\n          ></AppButton>\n        </AppCol>\n      </>\n    </div>\n  );\n}\n\nexport default ChangePassForm;\n","import React from \"react\";\nimport WhiteBgDiv from \"../../../organisms/WhiteBgDiv/WhiteBgDiv\";\nimport CompanyLayout from \"../../../templates/CompanyLayout/CompanyLayout\";\nimport ChangePassForm from \"../../applicant/Settings/pagecomponents/ChangePassword\";\nimport CompanyChangePassForm from \"./CompanyChangePassForm\";\n\nfunction CompanyChangePass() {\n  return (\n    <>\n      <CompanyLayout pageTitle=\"Change Password\">\n        {/* <CompanyChangePassForm /> */}\n       <WhiteBgDiv>\n       <ChangePassForm />\n       </WhiteBgDiv>\n      </CompanyLayout>\n    </>\n  );\n}\n\nexport default CompanyChangePass;\n"],"names":["authData","useSelector","state","auth","dispatch","useDispatch","changePasswordForm","passwordIsVisible","handleTextChange","e","meta","_e$target","target","value","name","RowKey","ChildKey","handleOnChangeTextInput","valueToUpdate","KeyName","toggleRevealPassword","toggleShowPassword","handleOnBlur","_jsx","className","children","_jsxs","_Fragment","Array","isArray","map","form","form_index","AppRow","child","child_index","hidden","AppCol","size","colums","FormInputRenderer","onBlurValidation","type","handleChange","metaData","label","input_type","data","isRequired","maxlength","errorMessage","id","style","padding","AppButton","onClick","handleValidateFields","change_password_object","ExtractFieldsFromFormData","console","log","checkPropertiesIsEmpty","toast","changePassword","unwrap","then","res","catch","err","changePasswordFunc","CompanyLayout","pageTitle","WhiteBgDiv","ChangePassForm"],"sourceRoot":""}