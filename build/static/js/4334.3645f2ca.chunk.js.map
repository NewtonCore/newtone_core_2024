{"version":3,"file":"static/js/4334.3645f2ca.chunk.js","mappings":"kOA+GA,UArGqB,SAAHA,GAAsB,IAAhBC,EAAQD,EAARC,SAChBC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXC,EAAaF,EAAbE,SAEAC,GAAWC,EAAAA,EAAAA,MAEjBC,GAAsCC,EAAAA,EAAAA,MAAiBC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAlDI,EAAYF,EAAA,GACbG,GAD8BH,EAAA,GACnBE,EAAaE,IAAI,aAC5BC,EAASH,EAAaE,IAAI,UAExBE,GAAWC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,IAAI,IAE5CC,EAAqBJ,EAArBI,iBACAC,EAAmBL,EAAnBK,eACMC,EAAkBD,EAAxBE,KACDC,OAA0BC,IAAlBH,EAA8BA,EAAcE,KAAO,GAkFhE,OAhFAE,EAAAA,EAAAA,YAAU,WACJL,EAAeM,iBAELF,IAAXV,GACY,OAAXA,IAEa,MAAXA,GAA6B,IAAXA,EACpBa,YAAW,WACTtB,GAASuB,EAAAA,EAAAA,MACX,GAAG,KAGc,MAAXd,GAA6B,IAAXA,GACxBa,YAAW,WACTtB,GAASuB,EAAAA,EAAAA,OACXvB,GAASwB,EAAAA,EAAAA,MACT,GAAG,KAMR,GAAG,CAACT,EAAeM,cAEpBD,EAAAA,EAAAA,YAAU,WAERpB,GAASyB,EAAAA,EAAAA,IAAoB,eAE/B,GAAG,CAACX,EAAiBY,UAAW7B,KAEhCuB,EAAAA,EAAAA,YAAU,WAE2B,OAA/BN,EAAiBY,WACnB1B,GAAS2B,EAAAA,EAAAA,MAEb,GAAG,CAACb,EAAiBY,aAErBN,EAAAA,EAAAA,YAAU,WACJL,EAAeM,aAAeN,EAAea,QAClC,WAATV,EAMEvB,EALa,OAAbY,EAIe,sBAAbR,EACO,GAAD8B,OAAI9B,GAEH,oBAKF,GAAD8B,OAAItB,GAPc,CAAEuB,SAAS,IASrB,WAATZ,GAMLvB,EALa,OAAbY,EAIe,uBAAbR,EACO,GAAD8B,OAAI9B,GAEH,qBAKF,GAAD8B,OAAItB,GAPc,CAAEuB,SAAS,IAWZ,KAAzBf,EAAegB,OAGjBpC,EAASI,EAAU,CAAE+B,SAAS,GAIpC,GAAG,CAACf,KAEGiB,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAvC,SAAGA,GACZ,C","sources":["routes/Providers/AuthProvider.js"],"sourcesContent":["import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation, useNavigate, useSearchParams } from \"react-router-dom\";\nimport {\n  getUserFromToken,\n  getUserTokenOffline,\n} from \"../../app-redux/features/Auth/authSlice\";\nimport { toggleLoginForm } from \"../../app-redux/features/appData/appDataSlice\";\nimport { toggleShowCreateAccountForm } from \"../../app-redux/features/appData/appDataSlice\";\n\nconst AuthProvider = ({ children }) => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  let { pathname } = location;\n\n  const dispatch = useDispatch();\n\n  let [searchParams, setSearchParams] = useSearchParams();\n  let nextPage = searchParams.get(\"nextPage\");\n  let action = searchParams.get(\"action\");\n\n  const authData = useSelector((state) => state.auth);\n\n  let { offlineUserToken } = authData;\n  let { loginUserState } = authData;\n  let { data: loginUserData } = loginUserState;\n  let  type  = loginUserData !== undefined ? loginUserData.type : \"\";\n\n  useEffect(() => {\n    if(!loginUserState.isLoggedIn){\n\n    if(action !== undefined){\n     if(action !== null){\n\n       if(action === \"1\" || action === 1){\n        setTimeout(() => {\n          dispatch(toggleLoginForm())\n        }, 3000);\n       }\n\n      else if(action === '2' || action === 2){\n        setTimeout(() => {\n          dispatch(toggleLoginForm())\n        dispatch(toggleShowCreateAccountForm())\n        }, 3000);\n      }\n\n     }\n    }\n  }\n   }, [loginUserState.isLoggedIn]);\n\n  useEffect(() => {\n    // Get the user offline token\n    dispatch(getUserTokenOffline(\"@userAccess\"));\n    // console.log(offlineUserToken.userToken)\n  }, [offlineUserToken.userToken, location]);\n\n  useEffect(() => {\n    //get user from token if not null\n    if (offlineUserToken.userToken !== null) {\n      dispatch(getUserFromToken());\n    }\n  }, [offlineUserToken.userToken]);\n\n  useEffect(() => {\n    if (loginUserState.isLoggedIn && !loginUserState.success) {\n      if (type === \"talent\") {\n        if (nextPage === null) {\n          // navigate(\"/talent/dashboard\",{ replace: true });\n\n          // console.log({ nextPage });\n          if (pathname !== \"/talent/dashboard\") {\n            navigate(`${pathname}`, { replace: true });\n          } else {\n            navigate(`/talent/dashboard`, { replace: true });\n          }\n          // navigate(`${nextPage}`, { replace: true });\n        } else {\n          // console.log({nextPage})\n          navigate(`${nextPage}`, { replace: true });\n        }\n      } else if (type === \"talent\") {\n        if (nextPage === null) {\n          // navigate(\"/talent/dashboard\",{ replace: true });\n\n          // console.log({ nextPage });\n          if (pathname !== \"/company/dashboard\") {\n            navigate(`${pathname}`, { replace: true });\n          } else {\n            navigate(`/company/dashboard`, { replace: true });\n          }\n          // navigate(`${nextPage}`, { replace: true });\n        } else {\n          // console.log({nextPage})\n          navigate(`${nextPage}`, { replace: true });\n        }\n      }\n    } else {\n      if (loginUserState.error !== \"\") {\n        // console.log({loginUserState});\n\n        navigate(pathname, { replace: true });\n        \n      }\n    }\n  }, [loginUserState]);\n\n  return <>{children}</>;\n};\n\nexport default AuthProvider;\n"],"names":["_ref","children","navigate","useNavigate","location","useLocation","pathname","dispatch","useDispatch","_useSearchParams","useSearchParams","_useSearchParams2","_slicedToArray","searchParams","nextPage","get","action","authData","useSelector","state","auth","offlineUserToken","loginUserState","loginUserData","data","type","undefined","useEffect","isLoggedIn","setTimeout","toggleLoginForm","toggleShowCreateAccountForm","getUserTokenOffline","userToken","getUserFromToken","success","concat","replace","error","_jsx","_Fragment"],"sourceRoot":""}