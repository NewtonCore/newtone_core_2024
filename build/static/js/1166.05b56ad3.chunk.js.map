{"version":3,"file":"static/js/1166.05b56ad3.chunk.js","mappings":"2KACA,EAA6B,kC,WCY7B,MAVA,SAAsBA,GAAgB,IAAbC,EAAQD,EAARC,SACvB,OACEC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAsBH,UACpCC,EAAAA,EAAAA,KAAA,OAAK,aAAW,aAAYD,UAC1BC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,aAAYF,SAAEA,OAIpC,C,2DCSA,IAjBA,SAA0BD,GAA2C,IAADK,EAAAL,EAAvCM,MAAAA,OAAK,IAAAD,EAAG,GAAEA,EAAAE,EAAAP,EAAEQ,OAAAA,OAAM,IAAAD,EAAG,KAAIA,EAAAE,EAAAT,EAAEU,GAAAA,OAAE,IAAAD,EAAG,IAAGA,EAE9D,OACEP,EAAAA,EAAAA,KAAAS,EAAAA,SAAA,CAAAV,SACGO,GACCN,EAAAA,EAAAA,KAAA,MAAIC,UAAS,GAAAS,OAJH,kBAIe,KAAAA,OAAIJ,GAAU,UAAY,eAAa,OAAMP,SACrEK,KAGDJ,EAAAA,EAAAA,KAAA,MAAIC,UAAU,kBAAiBF,UAC7BC,EAAAA,EAAAA,KAACW,EAAAA,GAAO,CAACV,UAAU,OAAOO,GAAIA,EAAGT,SAAEK,OAK7C,C,2DCPA,IARA,SAAgBN,GAA6B,IAA1BU,EAAEV,EAAFU,GAAIT,EAAQD,EAARC,SAAUa,EAAOd,EAAPc,QAC/B,OACEZ,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAACD,aAAqBE,IAAZF,EAAwBA,EAAU,WAAK,EAAGG,MAAO,CAAEC,eAAgB,QAAUR,GAAIA,EAAGT,SAChGA,GAGP,C,wGC4FA,IA1FA,SAA0BD,GAYtB,IAXFmB,EAAOnB,EAAPmB,QACAC,EAAQpB,EAARoB,SACAC,EAAIrB,EAAJqB,KACAC,EAAMtB,EAANsB,OACAC,EAAcvB,EAAduB,eACAC,EAAOxB,EAAPwB,QACAC,EAAWzB,EAAXyB,YACAC,EAAU1B,EAAV0B,WAAUC,EAAA3B,EACV4B,SAAAA,OAAQ,IAAAD,GAAOA,EACf1B,EAAQD,EAARC,SAAQ4B,EAAA7B,EACR8B,iBAAAA,OAAgB,IAAAD,GAAOA,EAEvB,OACE3B,EAAAA,EAAAA,KAAA,OAAAD,UACE8B,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CACJC,YAAU,EACVC,iBAAiB,GACjBb,KAAMA,EACNc,SAAS,SACTC,UAAU,EAEVd,OAAQA,EACRe,UAAQ,EAAApC,SAAA,CAEPuB,IAAWtB,EAAAA,EAAAA,KAACoC,EAAAA,EAAc,KAC3BpC,EAAAA,EAAAA,KAAC8B,EAAAA,EAAAA,OAAY,CAACO,aAAW,EAAAtC,UACvBC,EAAAA,EAAAA,KAAA,QAAMC,UAAU,UAASF,SAAEkB,OAG7BY,EAAAA,EAAAA,MAACC,EAAAA,EAAAA,KAAU,CAAA/B,SAAA,CACR2B,GACC1B,EAAAA,EAAAA,KAAAS,EAAAA,SAAA,CAAAV,UACE8B,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,qBAAoBF,SAAA,EACjC8B,EAAAA,EAAAA,MAAA,MAAA9B,SAAA,EACEC,EAAAA,EAAAA,KAACsC,EAAAA,IAAa,IAAG,mBAELxB,IAAbI,GAAuC,KAAbA,IACzBW,EAAAA,EAAAA,MAAApB,EAAAA,SAAA,CAAAV,SAAA,CACGmB,GACDlB,EAAAA,EAAAA,KAAA,YAEF,oCAKNA,EAAAA,EAAAA,KAAA,KAAGC,UAAU,cAAaF,SAAEmB,SAGhBJ,IAAbf,GAA0BA,MAG7BC,EAAAA,EAAAA,KAAC8B,EAAAA,EAAAA,OAAY,CAAA/B,UACX8B,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,qCAAoCF,SAAA,EACjDC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWF,UACxBC,EAAAA,EAAAA,KAACuC,EAAAA,EAAS,CACRtC,UAAU,QACVuC,KAAK,QACLlB,QAASA,EAETmB,gBAAiBf,EAAWgB,EAAAA,GAAeC,EAAAA,GAE3C/B,QAASS,EAAetB,cAEPe,IAAhBS,EAA4BA,GAAcvB,EAAAA,EAAAA,KAAAS,EAAAA,SAAA,CAAAV,SAAE,eAIhD6B,IACC5B,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWF,UACxBC,EAAAA,EAAAA,KAACuC,EAAAA,EAAS,CACRtC,UAAU,QACVwC,gBAAiBG,EAAAA,GACjBC,MAAM,cACNL,KAAK,QACLlB,QAASA,EACTV,QAASQ,EAAOrB,cAEAe,IAAfU,EAA2BA,GAAaxB,EAAAA,EAAAA,KAAAS,EAAAA,SAAA,CAAAV,SAAE,wBAS7D,C,sGClBA,IAvEA,SAAkBD,GAQd,IAADgD,EAAAhD,EAPDmB,QAAAA,OAAO,IAAA6B,EAAG,GAAEA,EAAAC,EAAAjD,EACZkD,UAAAA,OAAS,IAAAD,GAAQA,EACjBE,EAAWnD,EAAXmD,YACAC,EAAQpD,EAARoD,SAAQC,EAAArD,EACRsD,MAAAA,OAAK,IAAAD,EAAC,GAAEA,EACRE,EAAKvD,EAALuD,MACAC,EAASxD,EAATwD,UAEA,OACEtD,EAAAA,EAAAA,KAAAS,EAAAA,SAAA,CAAAV,cACiBe,IAAdwC,GACCzB,EAAAA,EAAAA,MAAA,OAEE5B,UAAU,qBAAoBF,SAAA,CAE7BuD,EAEAN,IACChD,EAAAA,EAAAA,KAACuD,EAAAA,EAAe,CACdf,KAAK,QACLgB,QAAM,EACNN,SAAUA,EACVnC,MAAO,CACL0B,gBAAiBG,EAAAA,GACjBC,MAAO,SACP9C,SAEDkD,QAKPpB,EAAAA,EAAAA,MAAA,OACEd,MAAO,CACL0C,QAAS,OACTC,WAAY,SACZC,cAAe,UAEjB1D,UAAU,qBAAoBF,SAAA,EAE9BC,EAAAA,EAAAA,KAAC4D,EAAAA,QAAQ,CACP3D,UAAU,wCACVc,MAAO,CAAE8C,OAAQ,GAAIC,aAAmBhD,IAAVuC,EAAsB,KAAO,KAC3DA,WAAiBvC,IAAVuC,EAAsBU,EAAAA,GAAYV,KAE3CrD,EAAAA,EAAAA,KAAA,KAAGC,UAAU,mBAAmBc,MAAO,CAAE8B,MAAOF,EAAAA,IAAgB5C,SAC7DqD,KAGHpD,EAAAA,EAAAA,KAAA,KAAGC,UAAU,8BAA6BF,SAAEkB,IAE3C+B,IACChD,EAAAA,EAAAA,KAACuD,EAAAA,EAAe,CACdf,KAAK,QACLgB,QAAM,EACNN,SAAUA,EACVnC,MAAO,CACL0B,gBAAiBG,EAAAA,GACjBC,MAAO,SACP9C,SAEDkD,QAOf,C,mFC9CA,IA5BA,SAAsBnD,GAAW,IAARkE,EAAGlE,EAAHkE,IAKvB,OACEhE,EAAAA,EAAAA,KAAA,OAAAD,UACE8B,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,cAAaF,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,SACEiE,MAAOD,EACPE,UAAQ,EACRC,KAAK,OACLlE,UAAU,eACV,mBAAiB,kBAGnBD,EAAAA,EAAAA,KAAA,UACEY,QAAS,kBAffwD,UAAUC,UAAUC,UAAUN,QAC9BO,EAAAA,GAAAA,KAAW,cAAe,IAcK,EACzBtE,UAAU,mBACVuE,GAAG,eAAczE,UAEjBC,EAAAA,EAAAA,KAACyE,EAAAA,IAAI,UAKf,C,uICZA,MAfA,SAAuB3E,GACrB,OAD4BA,EAAJ4E,MAEtB7C,EAAAA,EAAAA,MAAC8C,EAAAA,EAAiB,CAAA5E,SAAA,EAChB8B,EAAAA,EAAAA,MAAA,UAAA9B,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,oBACJC,EAAAA,EAAAA,KAAA,QAAMC,UAAU,aAAYF,SAAC,6CAG/BC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWF,UACxBC,EAAAA,EAAAA,KAAC4E,EAAAA,EAAa,CAACZ,IAAKa,gCAI5B,E,WCWA,MArBA,SAAmB/E,GAAoC,IAAjCqB,EAAIrB,EAAJqB,KAAM2D,EAAchF,EAAdgF,eAAe7D,EAAOnB,EAAPmB,QAEnC8D,GADQC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,OAAO,IAC5CH,iBACN,OACE/E,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAC8B,EAAAA,EAAK,CACJC,YAAU,EACVC,iBAAkB9B,EAAAA,EAAAA,YAClBiB,KAAMA,EACNC,OAAQ0D,EACR3C,UAAQ,EAAApC,UAER8B,EAAAA,EAAAA,MAACC,EAAAA,EAAAA,KAAU,CAAA/B,SAAA,EACTC,EAAAA,EAAAA,KAACmF,EAAc,CAACT,KAAMK,KACtB/E,EAAAA,EAAAA,KAACoF,EAAAA,EAAgB,CAACC,WAAYpE,UAKxC,C,+NC+EA,IArFA,SAAyBnB,GAMrB,IAADwF,EAAAxF,EALDyF,SAAAA,OAAQ,IAAAD,EAAGT,0BAA6BS,EACjCE,GAAA1F,EAAP2F,QAAO3F,EACP4F,OAAAA,OAAK,IAAAF,EAAG,SAAQA,EAAAG,EAAA7F,EAChBuF,WAAAA,OAAU,IAAAM,EAAG,SAAQA,EAAAC,EAAA9F,EACrB+F,SAAAA,OAAQ,IAAAD,EAAG,CAAC,UAASA,EAEjBE,EAAW,CACb,CACEtB,IAAIuB,EAAAA,EAAAA,KACJzC,WACEtD,EAAAA,EAAAA,KAACgG,EAAAA,EAAmB,CAAC5C,MAAOiC,EAAYrB,IAAKuB,EAASxF,UACpDC,EAAAA,EAAAA,KAACiG,EAAAA,EAAY,CAACP,MAAOA,EAAOlD,KAAM,GAAI0D,OAAO,OAInD,CACE1B,IAAIuB,EAAAA,EAAAA,KACJzC,WACEtD,EAAAA,EAAAA,KAACmG,EAAAA,EAAmB,CAACT,MAAOA,EAAO1B,IAAKuB,EAASxF,UAC/CC,EAAAA,EAAAA,KAACoG,EAAAA,EAAY,CAAC5D,KAAM,GAAI0D,OAAO,OAKrC,CACE1B,IAAIuB,EAAAA,EAAAA,KACJzC,WACEtD,EAAAA,EAAAA,KAACqG,EAAAA,EAAmB,CAACjD,MAAOiC,EAAYrB,IAAKuB,EAASxF,UACpDC,EAAAA,EAAAA,KAACsG,EAAAA,EAAY,CAAC9D,KAAM,GAAI0D,OAAO,OAIrC,CACE1B,IAAIuB,EAAAA,EAAAA,KACJzC,WACEtD,EAAAA,EAAAA,KAACuG,EAAAA,EAAkB,CACjBV,SAAUA,EACVzC,MAAOiC,EACPrB,IAAKuB,EAASxF,UAEdC,EAAAA,EAAAA,KAACwG,EAAAA,EAAW,CAAChE,KAAM,GAAI0D,OAAO,OAIpC,CACE1B,IAAIuB,EAAAA,EAAAA,KACJzC,WACEtD,EAAAA,EAAAA,KAACyG,EAAAA,EAAmB,CAACrD,MAAOiC,EAAYrB,IAAKuB,EAASxF,UACpDC,EAAAA,EAAAA,KAAC0G,EAAAA,EAAY,CAAClE,KAAM,GAAI0D,OAAO,OAIrC,CACE1B,IAAIuB,EAAAA,EAAAA,KACJzC,WACEtD,EAAAA,EAAAA,KAAC2G,EAAAA,EAAqB,CAACvD,MAAOiC,EAAYrB,IAAKuB,EAASxF,UACtDC,EAAAA,EAAAA,KAAC4G,EAAAA,EAAc,CAACpE,KAAM,GAAI0D,OAAO,QAMzC,OACElG,EAAAA,EAAAA,KAAA,OAAAD,UACE8B,EAAAA,EAAAA,MAAC8C,EAAAA,EAAiB,CAAA5E,SAAA,EAEhBC,EAAAA,EAAAA,KAAA,UAAAD,UACEC,EAAAA,EAAAA,KAAA,QAAMC,UAAU,yBAAwBF,SAAC,yBAG3CC,EAAAA,EAAAA,KAAC6G,EAAAA,QAAM,CAAC5G,UAAW6G,EAAAA,EAAAA,YAAwB/G,SACxC+F,EAASiB,KAAI,SAACC,GACb,OACEhH,EAAAA,EAAAA,KAAA,OAAkBC,UAAU,OAAMF,SAC/BiH,EAAI1D,WADG0D,EAAIxC,GAIlB,UAKV,C,qGCxFA,MAVA,SAA4B1E,GAAkC,IAA/BC,EAAQD,EAARC,SAAUgB,EAAKjB,EAALiB,MAAOd,EAASH,EAATG,UAC9C,OACED,EAAAA,EAAAA,KAAA,OAAKwE,GAAG,eAAezD,MAAOA,EAAOd,UAAWA,EAAUF,UACxDC,EAAAA,EAAAA,KAAC2E,EAAAA,EAAiB,CAAA5E,UACdC,EAAAA,EAAAA,KAAAS,EAAAA,SAAA,CAAAV,SAAGA,OAIb,C,2FC8BA,IAtCA,SAAoBD,GAAwC,IAArCmH,EAAYnH,EAAZmH,aAAcC,EAAYpH,EAAZoH,aAAcC,EAAIrH,EAAJqH,KACjD,OACEtF,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,eAAcF,SAAA,CAE1BkH,EAAaG,WACZpH,EAAAA,EAAAA,KAAC4D,EAAAA,QAAQ,CACP7C,MAAO,CAAE8C,OAAQ,IAAKwD,aAAc,IACpChE,MAAOiE,EAAAA,MAGTtH,EAAAA,EAAAA,KAAC4D,EAAAA,QAAQ,CACP7C,MAAO,CAAE8C,OAAQ,IAAKwD,aAAc,IACpChE,MAAOkE,EAAAA,MAGXvH,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,MAAAD,SACGkH,EAAaG,UAAY,2BAA6B,kBAEzDpH,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,KAAAD,SAAG,4DACH8B,EAAAA,EAAAA,MAAA,OAAA9B,SAAA,EACEC,EAAAA,EAAAA,KAAC4D,EAAAA,QAAQ,CACP7C,MAAO,CAAE8C,OAAQ,GAAIwD,aAAc,IACnChE,WAAwBvC,IAAjBoG,EAA6BA,EAAaM,QAAU,KAChD,IACZN,EAAaO,SAEhBzH,EAAAA,EAAAA,KAAA,UAEAA,EAAAA,EAAAA,KAAA,MAAAD,SAAKkH,EAAaG,UAAY,SAAW,aACzCpH,EAAAA,EAAAA,KAACuC,EAAAA,EAAS,CAACC,KAAK,QAAQgB,QAAM,EAACN,SAAUiE,EAAKpH,SAAC,qBAKrD,C,iQCsBA,MAzDA,SAA2BD,GASvB,IARF4H,EAAe5H,EAAf4H,gBACAC,EAAK7H,EAAL6H,MAAKC,EAAA9H,EACL+H,WAAAA,OAAU,IAAAD,EAAG,CAAC,EAACA,EAAAE,EAAAhI,EACfiI,eAAAA,OAAc,IAAAD,EAAG,CAAC,EAACA,EAGnBE,GAFYlI,EAAZmI,aACcnI,EAAdoI,eACYpI,EAAZkI,cACAG,EAASrI,EAATqI,UAEA,OACEnI,EAAAA,EAAAA,KAAC6G,EAAAA,QAAM,CAAA9G,UACL8B,EAAAA,EAAAA,MAACuG,EAAAA,QAAM,CAAArI,SAAA,CAEgB,IAApB2H,IACC1H,EAAAA,EAAAA,KAAA,OAAKC,UAAU,cAAaF,UAC1BC,EAAAA,EAAAA,KAACuC,EAAAA,EAAS,CACRjB,QAAS6G,EACTpH,MAAO,CAAE0B,gBAAiB4F,EAAAA,IAC1B7F,KAAK,QACL5B,QAASmH,EACT3H,MAAM,gBAYZJ,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWF,SACvB2H,EAAkB,IAAMC,GACvB3H,EAAAA,EAAAA,KAACuC,EAAAA,EAAS,CACRjB,QAAS6G,EAET3F,KAAK,QACL5B,QAASiH,EACTzH,MAAM,UAGRJ,EAAAA,EAAAA,KAACuC,EAAAA,EAAS,CACRjB,QAAS6G,EACTvH,QAASoH,EAETxF,KAAK,QACLpC,MAAM,iBAOpB,E,iCC5DA,EAAgC,6BCyEhC,MA9DA,SAA0BN,GAKtB,IAJFwI,EAASxI,EAATwI,UACAZ,EAAe5H,EAAf4H,gBACAa,EAAwBzI,EAAxByI,yBACAC,EAAoB1I,EAApB0I,qBAEA,OACExI,EAAAA,EAAAA,KAAA,OAAAD,UAEEC,EAAAA,EAAAA,KAAA,UAAAD,SAEG0I,MAAMC,QAAQJ,EAAUZ,GAAqC,qBACA,IAA5DY,EAAUZ,GAAqC,mBAAEiB,SAC/C9G,EAAAA,EAAAA,MAAApB,EAAAA,SAAA,CAAAV,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,sBACJC,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAC6G,EAAAA,QAAM,CAAC5G,UAAU,GAAEF,SACjB0I,MAAMC,QACLJ,EAAUZ,GAAqC,qBAE/CY,EAAUZ,GAAqC,mBAAEX,KAC/C,SAAC6B,EAAKC,GACJ,OACE7I,EAAAA,EAAAA,KAACoI,EAAAA,QAAM,CAAa5F,KAAM,EAAGsG,QAAS,EAAGC,QAAS,GAAIC,QAAS,EAAGC,QAAS,EAAElJ,UAC3EC,EAAAA,EAAAA,KAACkJ,EAAAA,EAAY,CACXtI,QAAS,kBACP4H,EACEF,EAAUZ,GAAiBlD,GAC3BoE,EAAIpE,GACJqE,EACD,EAEH9H,MAAO,CACL0B,iBAAiB0G,EAAAA,EAAAA,IACfZ,EACAK,EAAIpE,IAEF4E,EAAAA,GACAxG,EAAAA,GACJC,MAAOwG,EAAAA,GACPC,MAAO,OACPzF,OAAQ,QAEVrB,KAAK,QACLvC,UAAS,OAAAS,OAAS6I,GAAuBxJ,UAEzCC,EAAAA,EAAAA,KAAAS,EAAAA,SAAA,CAAAV,UACE8B,EAAAA,EAAAA,MAAA,OAAA9B,SAAA,CAAM6I,EAAIY,KAAK,YAxBRX,EA6BjB,YAQpB,E,wFCgJA,MA3LA,SAA2B/I,GAWvB,IAADgD,EAAAhD,EAVDmB,QAAAA,OAAO,IAAA6B,EAAG,aAAYA,EACtB5B,EAAQpB,EAARoB,SACAC,EAAIrB,EAAJqB,KACAC,EAAMtB,EAANsB,OAEAE,GADcxB,EAAduB,eACOvB,EAAPwB,SACAC,EAAWzB,EAAXyB,YACAC,EAAU1B,EAAV0B,WACAiI,EAAK3J,EAAL2J,MAGAC,GAA+BC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAvCI,EAAQF,EAAA,GAACG,EAAWH,EAAA,GACrBI,GAAehF,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMqD,SAAS,IACnD2B,EAAuCD,EAAvCC,mBAAoBC,EAAmBF,EAAnBE,eAItBC,GAAWC,EAAAA,EAAAA,MAEjBC,GACEC,EAAAA,EAAAA,uBAAsB,CACpBC,QAAQ,EACRC,OAAM,EACNC,QAAS,WACPN,GAASO,EAAAA,EAAAA,OACTnG,EAAAA,GAAAA,QAAc,uBAAwB,KACtC4F,GAASQ,EAAAA,EAAAA,KAAyB,GACpC,EACAC,OAAQ,SAACC,GAEIC,MAAMD,GAAGE,MAAK,SAACC,GAAC,OAAKA,EAAEC,MAAM,IAEnCF,MAAK,SAACG,GACT,IAAIC,EAAS,QAAAzK,QAAWqF,EAAAA,EAAAA,KAAQ,QAC1BqF,EAAS,IAAIC,KAAK,CAACH,GAAMC,EAAW,CACxChH,KAAM+G,EAAI/G,OAKRmH,GAAOC,EAAAA,EAAAA,IAAWL,EAAI,GAADxK,OAAK,IAAI8K,KAAM,eAepCC,GAAeC,EAAAA,EAAAA,IAAe,CAAEC,MAAOP,EAAQ3B,MAAMA,EAAMjF,KAC/D2F,GAASyB,EAAAA,EAAAA,IAAkB,CAAElH,KAAM+G,KAAiBI,SACnDd,MAAK,SAACG,GACL3G,EAAAA,GAAAA,QAAc,4BAChB,IAEA4F,GAAS2B,EAAAA,EAAAA,IAAcR,GACzB,IAEA/G,EAAAA,GAAAA,KAAW,uBAAwB,IACrC,IA9CYwH,GAAF1B,EAAN2B,OAAsB3B,EAAd0B,gBAAgBE,EAAa5B,EAAb4B,cAAeC,EAAY7B,EAAZ6B,aAiF/C,OAhCAC,EAAAA,EAAAA,YAAU,YACJlC,EAAmBmC,SAAWlC,IAChC+B,GAEJ,GAAG,CAAChC,EAAmBmC,QAASlC,KAIhCiC,EAAAA,EAAAA,YAAU,gBACarL,IAAjBoL,GAA+C,KAAjBA,IAGhC/B,GAAS2B,EAAAA,EAAAA,IAAcI,IAEZpB,MAAMoB,GAAcnB,MAAK,SAACC,GAAC,OAAKA,EAAEC,MAAM,IAG9CF,MAAK,SAACG,GACT,IAGN,GAAG,CAACgB,KAEJC,EAAAA,EAAAA,YAAU,WAES,4BAA4BE,KAAKjI,UAAUkI,YAE9DvC,GAAY,EAGZ,GAAE,KAGA/J,EAAAA,EAAAA,KAAA,OAAAD,UACE8B,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CACJU,KAAK,KACLT,YAAU,EACVC,iBAAiB,GACjBb,KAAMA,EACNC,OAAQA,EACRe,UAAQ,EAAApC,SAAA,CAEPuB,IAAWtB,EAAAA,EAAAA,KAACoC,EAAAA,EAAc,KAC3BpC,EAAAA,EAAAA,KAAC8B,EAAAA,EAAAA,OAAY,CAACO,aAAW,EAAAtC,UACvBC,EAAAA,EAAAA,KAAA,QAAMC,UAAU,UAASF,SAAEkB,OAG7BjB,EAAAA,EAAAA,KAAC8B,EAAAA,EAAAA,KAAU,CAAA/B,SAEP+J,GAAW9J,EAAAA,EAAAA,KAAAS,EAAAA,SAAA,CAAAV,UACXC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,cAAaF,SAAC,8EAGrB8B,EAAAA,EAAAA,MAAApB,EAAAA,SAAA,CAAAV,SAAA,EACNC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,cAAaF,SACzBmB,KAEHlB,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAA,UAAAD,UACEC,EAAAA,EAAAA,KAAA,OACEC,UAAU,MACVc,MAAO,CAAEuI,MAAO,MAAO7G,gBAAiB8J,EAAAA,IACxCC,IAAKC,EAAAA,SAKXzM,EAAAA,EAAAA,KAAA,UAEAA,EAAAA,EAAAA,KAAA,OAAK0M,MAAM,kCAAkCC,KAAK,QAAO5M,SAAC,oKAM1DC,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,KAAGC,UAAU,cAAaF,SAAC,8EAK3BC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,8CAA6CF,UAE1D8B,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,8CAA6CF,SAAA,EAC1DC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,MAAKF,UAClBC,EAAAA,EAAAA,KAACuC,EAAAA,EAAS,CACRC,KAAK,QACLlB,QAASA,EACTmB,gBAAiBE,EAAAA,GACjB/B,QAASmL,EACT3L,WACkBU,IAAhBS,EACIA,EACA,iCAIVvB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,MAAKF,UAClBC,EAAAA,EAAAA,KAACuC,EAAAA,EAAS,CACRE,gBAAiBG,EAAAA,GACjBC,MAAM,cACNL,KAAK,QACLlB,QAASA,EACTV,QAASQ,EACThB,WAAsBU,IAAfU,EAA2BA,EAAa,yBAYjE,E,sBCzKA,MAvCA,SAA4B1B,GAA2B,IAAxBsB,EAAMtB,EAANsB,OAAOE,EAAOxB,EAAPwB,QAAQH,EAAIrB,EAAJqB,KAC5C,OACEnB,EAAAA,EAAAA,KAAA,OAAAD,UACE8B,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CACJC,YAAU,EACVC,iBAAiB,GACjBb,KAAMA,EACNC,OAAQA,EACRe,UAAQ,EAAApC,SAAA,CAEPuB,IAAWtB,EAAAA,EAAAA,KAACoC,EAAAA,EAAc,KAC3BpC,EAAAA,EAAAA,KAAC8B,EAAAA,EAAAA,OAAY,CAACO,aAAW,EAAAtC,UACvBC,EAAAA,EAAAA,KAAA,QAAMC,UAAU,UAASF,SAAC,wBAG5B8B,EAAAA,EAAAA,MAACC,EAAAA,EAAAA,KAAU,CAAA/B,SAAA,EACTC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,cAAaF,SAAC,gEAG3BC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,8CAA6CF,UAC1DC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,8CAA6CF,UAC1DC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,MAAKF,UAClBC,EAAAA,EAAAA,KAACuC,EAAAA,EAAS,CACRC,KAAK,QACLlB,QAASA,EACTmB,gBAAiBE,EAAAA,GACjB/B,QAASQ,EACThB,MAAM,sBAUxB,E,WCsDA,MA5FA,SAAiBN,GAAiC,IAAD8M,EAAA9M,EAA9B+M,aAAAA,OAAY,IAAAD,EAAC,GAAEA,EAACE,EAAWhN,EAAXgN,YAC3B3C,GAAWC,EAAAA,EAAAA,MACX2C,GAAMC,EAAAA,EAAAA,QAAO,MAGnBtD,GAA0BC,EAAAA,EAAAA,UAAS,YAAWC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAhCuD,GAAFrD,EAAA,GAAUA,EAAA,IAehBsD,EAAa,SAACrC,GAClB,IAAAsC,EAduB,SAACtC,GACxB,IAAMuC,EAAQ5B,KAAK6B,MAAMxC,GAAKW,KAAK6B,MAAM,IAAI7B,MACvC8B,EAAUC,KAAKC,MAAOJ,EAAQ,IAAQ,IACtCK,EAAUF,KAAKC,MAAOJ,EAAQ,IAAO,GAAM,IAEjD,MAAO,CACLA,MAAAA,EACAM,MAHYH,KAAKC,MAAOJ,EAAQ,IAAO,GAAK,GAAM,IAIlDK,QAAAA,EACAH,QAAAA,EAEJ,CAG2CK,CAAiB9C,GAApDuC,EAAKD,EAALC,MAAOM,EAAKP,EAALO,MAAOD,EAAON,EAAPM,QAASH,EAAOH,EAAPG,QACzBF,GAAS,IAIXH,GACGS,EAAQ,EAAIA,EAAQ,IAAMA,GACzB,KACCD,EAAU,EAAIA,EAAU,IAAMA,GAC/B,KACCH,EAAU,EAAIA,EAAU,IAAMA,IAGnCnD,GAASyD,EAAAA,EAAAA,KAAaF,EAAQ,EAAIA,EAAQ,IAAMA,GAChD,KACCD,EAAU,EAAIA,EAAU,IAAMA,GAC/B,KACCH,EAAU,EAAIA,EAAU,IAAMA,KAEnC,EAEMO,EAAa,SAAChD,GAIlBoC,EAAS,MAADvM,OAAOmM,EAAY,QAC3B1C,GAASyD,EAAAA,EAAAA,IAAY,MAADlN,OAAOmM,EAAY,SAKnCE,EAAIe,SAASC,cAAchB,EAAIe,SACnC,IAAMtJ,EAAKwJ,aAAY,WACrBd,EAAWrC,EACb,GAAG,KACHkC,EAAIe,QAAUtJ,CAChB,EAEMyJ,EAAc,WAClB,IAAIC,EAAW,IAAI1C,KAIf2C,EAAyB,GAAdtB,EAEf,OADAqB,EAASE,WAAWF,EAASG,aAAeF,GACrCD,CACT,EAkBA,OAXA/B,EAAAA,EAAAA,YAAU,WACR0B,EAAWI,IACb,GAAG,KAUDjO,EAAAA,EAAAA,KAAA,OAAKwE,GAAG,gBAAezE,UACrBC,EAAAA,EAAAA,KAAA,QAAAD,SAAO+M,KAGb,E,4CC9CA,MA5CA,SAAwBhN,GAA0B,IAAvB4E,EAAI5E,EAAJ4E,KAAM4J,EAAYxO,EAAZwO,aAC/B,OACEtO,EAAAA,EAAAA,KAAA,OAAAD,SACG0I,MAAMC,QAAQhE,IACbA,EAAKqC,KAAI,SAACwH,EAAWC,GACnB,OACExO,EAAAA,EAAAA,KAAC6G,EAAAA,QAAM,CAAC5G,UAAU,OAAMF,SACrBwO,EAAUxO,SAASgH,KAAI,SAAC0H,EAAaC,GACpC,IAA2B,IAAvBD,EAAYE,OACd,OACE3O,EAAAA,EAAAA,KAACoI,EAAAA,QAAM,CAAC5F,KAAM,GAAK+L,EAAUK,OAAO7O,UAClCC,EAAAA,EAAAA,KAAC6O,EAAAA,EAAiB,CAChBC,aACuB,cAArBL,EAAYtK,KACRmK,EACA,WAAO,EAEbnK,KAAMsK,EAAYtK,KAClB4K,SAAU,CACRC,KAAM,CACJC,OAAQT,EACRU,SAAUR,GAGZtO,MAAOqO,EAAYrO,MACnB6D,MAAOwK,EAAYxK,MACnBwD,KAAMgH,EAAYhH,KAClB0H,WAAYV,EAAYU,WACxBC,QAAS,wBACT1K,KAAM+J,EAAY/J,KAClBP,KAAMsK,EAAYU,eApBkBV,EAAYjK,GA0B5D,KA9B4B+J,EAAU/J,GAiC5C,KAGR,ECyBA,MA7DA,SAA4B1E,GAOxB,IANFsB,EAAMtB,EAANsB,OACAE,EAAOxB,EAAPwB,QACAH,EAAIrB,EAAJqB,KACAkO,EAAQvP,EAARuP,SACAlF,EAAQrK,EAARqK,SACAmF,EAAQxP,EAARwP,SAoBA,OACEtP,EAAAA,EAAAA,KAAA,OAAAD,UACE8B,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CACJC,YAAU,EACVC,iBAAiB,GACjBb,KAAMA,EACNC,OAAQA,EACRe,UAAQ,EACRK,KAAK,KAAIzC,SAAA,CAERuB,IAAWtB,EAAAA,EAAAA,KAACoC,EAAAA,EAAc,KAC3BpC,EAAAA,EAAAA,KAAC8B,EAAAA,EAAAA,OAAY,CAACO,aAAW,EAAAtC,UACvBC,EAAAA,EAAAA,KAAA,QAAMC,UAAU,UAASF,SAAC,uBAG5B8B,EAAAA,EAAAA,MAACC,EAAAA,EAAAA,KAAU,CAAA/B,SAAA,EACTC,EAAAA,EAAAA,KAACuP,EAAe,CACdjB,aAnCe,SAACzD,EAAGmE,GAI3B,IAAAQ,EAAsB3E,EAAE4E,OAAlBxL,EAAKuL,EAALvL,MAAOwD,EAAI+H,EAAJ/H,KACLwH,EAAqBD,EAArBC,OAAQC,EAAaF,EAAbE,SAEhB/E,GACEuF,EAAAA,EAAAA,IAAuC,CACrCzK,MAAO,kBACP0K,cAAe1L,EACf2L,QAASnI,EACTwH,OAAQA,EACRC,SAAAA,IAGN,EAoBUxK,KAAM2K,KAGRrP,EAAAA,EAAAA,KAACuC,EAAAA,EAAS,CACRC,KAAK,QACLlB,QAASA,EACTmB,gBAAiBE,EAAAA,GACjB/B,QAAS,kBAAM0O,GAAU,EACzBlP,MAAM,SACNH,UAAU,iBAMtB,EC0pBA,MAhqBA,WACE,IAAM4P,GAAWC,EAAAA,EAAAA,MAEjBC,GAA0BC,EAAAA,EAAAA,MAApBC,EAAMF,EAANE,OAAQC,EAAOH,EAAPG,QACdxG,GAAwCC,EAAAA,EAAAA,eAAS7I,GAAU8I,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAtDyG,EAAavG,EAAA,GAAEwG,EAAgBxG,EAAA,GAC9ByG,GAAgBrD,EAAAA,EAAAA,SAAO,GAEzB7C,GAAWC,EAAAA,EAAAA,MACTkG,GAAYtL,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMwE,KAAK,IAGxC8G,GAFKvL,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMuL,IAAI,IAC5CC,eACA/L,KAEAsF,GAAehF,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMqD,SAAS,IACnDoI,EAAgCJ,EAAhCI,YAAaC,EAAmBL,EAAnBK,eAEPC,GADWF,EAAjBhM,KACwBiM,EAAxBjM,MAGAmM,GAFY7L,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAM6L,aAAa,IAEtDD,YACME,EAAoBF,EAA1BnM,KACJsM,EAAkBD,EAAgBE,eAAe,mBACjDF,EAAgBC,gBAChB,GAKAE,GAAeN,EAAcK,eAAe,OAASL,EAGvDO,GAcEnH,EAdFmH,eACAzJ,GAaEsC,EAbFtC,gBACA0J,GAYEpH,EAZFoH,kBACAnH,GAWED,EAXFC,mBACAoH,GAUErH,EAVFqH,mBACAC,GASEtH,EATFsH,YACApH,GAQEF,EARFE,eACAqH,GAOEvH,EAPFuH,sBACAC,GAMExH,EANFwH,eACAC,GAKEzH,EALFyH,eACAC,GAIE1H,EAJF0H,UACAC,GAGE3H,EAHF2H,kBACAC,GAEE5H,EAFF4H,wBACAC,GACE7H,EADF6H,YAEUvJ,GAAc6I,GAApBzM,MAENyH,EAAAA,EAAAA,YAAU,WAUR,YATgBrL,IAAZoP,IACGG,EAAcvC,UAEjB3D,GAAS2H,EAAAA,EAAAA,IAAa,CAAEtN,GAAIuN,SAAS7B,MAGrC/F,GAAS6H,EAAAA,EAAAA,IAAa,CAAEC,SAAU/B,OAG/B,WACLG,EAAcvC,SAAU,CAC1B,CACF,GAAG,CAACoC,KAEJ/D,EAAAA,EAAAA,YAAU,WAER,GAAyB,IAArB7D,GAAUK,OAAc,CAE1B,IAAIuJ,EACmB,IAArB5J,GAAUK,QAAewJ,EAAAA,EAAAA,IAAiB7J,IAAa,GACrDG,MAAMC,QAAQwJ,IAChB/H,GAASiI,EAAAA,EAAAA,IAAqBF,GAElC,CACF,GAAG,CAAC5J,MAEJ6D,EAAAA,EAAAA,YAAU,WAER,OAAO,WACLhC,GAASkI,EAAAA,EAAAA,OACTlI,GAASmI,EAAAA,EAAAA,IAAqB,OAC9BnI,GAASoI,EAAAA,EAAAA,IAAiB,MAC5B,CACF,GAAG,IAEH,IAMQhK,GAA6ByB,EAA7BzB,yBAEFiK,GAAsB,WAC1BrI,GACEsI,EAAAA,EAAAA,IAAc,CACZhJ,MAAOyH,GAAa1M,GACpBkO,gBAAiBnK,MAGlBsD,SACAd,MAAK,SAACG,IAELyH,EAAAA,EAAAA,IAAuB,cAAe,CACpClJ,MAAOyH,GACPhG,IAAKA,EACL+E,OAAQA,IAEVJ,EAAS,IAADnP,OAAKkS,EAAAA,GAAAA,OAAkBlS,OAAGkS,EAAAA,GAAAA,YACpC,GACJ,GAEAzG,EAAAA,EAAAA,YAAU,WACJ0G,IACgB,aAAdnB,IACFc,IAGN,GAAG,CAACd,MAEJvF,EAAAA,EAAAA,YAAU,WACJ1D,MAAMC,QAAQJ,UAA4BxH,IAAdwH,SAGKxH,IAA/BwH,GAAUZ,KACZyC,GAAS2I,EAAAA,EAAAA,IAAwBxK,GAAUZ,IAAiBlD,IAOlE,GAAG,CAAC8D,GAAWC,GAA0Bb,KAEzC,IAAIqL,GAAQ,CACV,CACEtL,KAAM,OACNjH,GAAI,gBACJF,QAAQ,GAEV,CACEmH,KAAMwI,EACNzP,GAAG,iBAADE,OAAmBuP,GACrB3P,QAAQ,GAGV,CACEmH,UAAuB3G,IAAjBoQ,GAA6BA,GAAazJ,KAAO,GACvDjH,GAAI,IACJF,QAAQ,IAIR0S,GAAcC,EAAAA,EAAAA,MAAAA,GAAAA,SAAAA,QAAoC,SAACC,GACrD,OAAOA,EAAEzL,OAASwI,CACpB,IAAG,GAEHkD,IAAwCxJ,EAAAA,EAAAA,UAAS,MAAKyJ,IAAAvJ,EAAAA,EAAAA,GAAAsJ,GAAA,GAAjDN,GAAaO,GAAA,GAAEC,GAAgBD,GAAA,IAEpCjH,EAAAA,EAAAA,YAAU,WACJmF,IAEFnH,GAASmI,EAAAA,EAAAA,KAAqB,GAElC,GAAG,CAAChB,MAEJnF,EAAAA,EAAAA,YAAU,gBAEsBrL,IAA1BkS,GAAYM,YACVN,GAAYM,WAAahC,GAC3B+B,IAAiB,GAEjBA,IAAiB,GAOf7B,IACF6B,IAAiB,GAGvB,GAAG,CAACL,GAAa1B,GAAaE,KAE9B,IAUM+B,GAA4B,SAACC,GACjCrJ,GAASsJ,EAAAA,EAAAA,IAAqBD,GAChC,EA6FA,OAjEArH,EAAAA,EAAAA,YAAU,gBAGsBrL,IAA1BkS,GAAYM,YACdnJ,GAASQ,EAAAA,EAAAA,IAAyBqI,GAAYM,YAEzCN,GAAYM,WACfnJ,GAASuJ,EAAAA,EAAAA,KAAuB,IAItC,GAAG,CAACV,MAEJ7G,EAAAA,EAAAA,YAAU,WACR,IAAIwH,EAAe,KACbC,EAAyB,WACzBC,SAASlF,SAAWgF,IAIpBxJ,GAAS2J,EAAAA,EAAAA,KAAqB,IAE9B3J,GAAS4J,EAAAA,EAAAA,OAMf,EAeA,OAbIf,GAAYM,WAAahC,KAAgBqC,GAG3CE,SAASG,iBAAiB,mBAAoBJ,GAE5C3J,GAAmBmC,UACrB6H,YAAW,WACTN,GAAe,CACjB,GAAG,KAEHE,SAASK,oBAAoB,mBAAoBN,IAG5C,WACLC,SAASK,oBAAoB,mBAAoBN,EACnD,CACF,GAAG,CAACtC,GAAarH,MAEjBkC,EAAAA,EAAAA,YAAU,WACR,IAAIgI,EAQ0B,KAN9BA,EAAiBnD,EAAgBoD,QAAO,SAAClJ,GACvC,OAAO6G,SAAS7G,EAAImJ,aAAetC,SAAS7B,EAC9C,KAImBvH,OACjByH,EAAiB+D,EAAe,IAEhC/D,EAAiB,CAACzI,MAAM,GAG5B,GAAG,CAACqJ,EAAiBd,KAGnBlQ,EAAAA,EAAAA,KAAAS,EAAAA,SAAA,CAAAV,UAGG8Q,EAAYvP,UAEbO,EAAAA,EAAAA,MAACyS,EAAAA,EAAY,CAACC,UAAU,QAAQC,qBAAiB1T,EAAUf,SAAA,EAC3DC,EAAAA,EAAAA,KAACyU,EAAmB,CAClBnF,SAAU,kBAnGa,WAC3B,IAAIoF,GAAUC,EAAAA,EAAAA,IAA0B9C,IAIpC+C,EAAa,CACfC,cACoC/T,IAAlCwH,GAAUZ,IAAiBlD,GACvB8D,GAAUZ,IAAiBlD,GAC3B,GACNkQ,QAASA,EAAQzT,SAGnB2T,GAAalJ,EAAAA,EAAAA,IAAekJ,GAE5BzK,GAAS2K,EAAAA,EAAAA,IAAqB,CAAEpQ,KAAMkQ,KACnC/I,SACAd,MAAK,SAACG,GACL3G,EAAAA,GAAAA,QAAc,8BACdgP,IAA0B,EAC5B,IACCwB,OAAM,SAACC,GACNzQ,EAAAA,GAAAA,MAAYyQ,EACd,GACJ,CA2EsBC,EAAsB,EACtC9K,SAAUA,EACVkF,SAAUwC,GACV1Q,KAAMyQ,GACNxQ,OAAQ,kBAAMmS,IAA0B,EAAM,KAEhDvT,EAAAA,EAAAA,KAACkV,EAAmB,CAClB9T,OAnHuB,WAC3ByO,EAAS,iBACT1F,GAAS2J,EAAAA,EAAAA,MACX,EAiHM3S,KAAM+I,MAIRlK,EAAAA,EAAAA,KAACmV,EAAAA,EAAiB,CAChB7T,QAAS2I,GAAmB3I,QAC5BI,UAAU,EACVP,KAAMoQ,GACNtQ,QAAQ,eACRC,SAAS,6CACTE,OAAQ,WACN+I,GAASoI,EAAAA,EAAAA,IAAiB,MAC5B,EACAlR,eAAgB,WACdmR,IACF,EACAjR,YAAY,cACZC,WAAW,WAGS,IAArB8G,GAAUK,SACT3I,EAAAA,EAAAA,KAAAS,EAAAA,SAAA,CAAAV,cACqBe,IAAlBqP,EACCA,EAAcxI,MAAQ,GAA6B,IAAxBwI,EAAcxI,OACvC3H,EAAAA,EAAAA,KAACmV,EAAAA,EACC,CACAzT,UAAU,EACVP,MAAM,EACNF,QAAO,qBACPG,OAAQ,WACNyO,GAAU,EACZ,EACAxO,eAAgB,WACdwO,EAAS,gBACX,EACAtO,YAAY,gBACZK,kBAAkB,EAClB7B,UAEA8B,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,sBAAqBF,SAAA,CAAC,mDAEjCmR,GAAaD,eAAe,QAAO,OAAAvQ,OACxBwQ,GAAazJ,MACpB,GACL,sCACH5F,EAAAA,EAAAA,MAAA,KAAG5B,UAAU,aAAYF,SAAA,CAAC,6BACEqV,EAAAA,EAAAA,IAAWjF,EAAc,eAAe,mBAAiBA,EAAcnE,OAAO,aAK5GnK,EAAAA,EAAAA,MAAApB,EAAAA,SAAA,CAAAV,SAAA,EACEC,EAAAA,EAAAA,KAACmV,EAAAA,EAAiB,CAChBjU,SAAQ,4BAAAR,OAA8B4H,GAAUK,OAAM,+BAAAjI,OAA8BsS,GAAYqC,SAAQ,SACxG3T,UAAU,EACVP,KAAMsQ,GACNxQ,QAAO,GAAAP,OAAKuP,GACZ7O,OAAQ,WACNyO,GAAU,EACZ,EACAxO,eAAgB,WACd8I,GAASuJ,EAAAA,EAAAA,OACTvJ,GAASmI,EAAAA,EAAAA,KAAqB,GAChC,EACA/Q,YAAY,QACZC,WAAW,YAGbxB,EAAAA,EAAAA,KAACsV,EAAkB,CACjBpU,SAAQ,QAAAR,OACNwQ,GAAaD,eAAe,QAAO,GAAAvQ,OAC5BwQ,GAAazJ,MAChB,GAAE,0BAAA/G,OAEN4H,GAAUK,OAAM,+BAAAjI,OACYsS,GAAYqC,SAAQ,SAClD5L,MAAOyH,GACPjQ,QAAO,GAAAP,OAAKuP,EAAM,KAAAvP,OAChBwQ,GAAaD,eAAe,QAAO,KAAAvQ,OAC1BwQ,GAAazJ,MAClB,IAENtG,KAAMkQ,GACNtF,eAAgB,WACd5B,GAASO,EAAAA,EAAAA,MAEX,EACAtJ,OAAQ,kBA/MtByO,EAAS,sBACT1F,GAASQ,EAAAA,EAAAA,MA8MoC,OAKrC,MAMN3K,EAAAA,EAAAA,KAACuV,EAAAA,EAAa,CAAAxV,SACXgT,GAAMhM,KAAI,SAACyO,EAAM3M,GAChB,OACE7I,EAAAA,EAAAA,KAACyV,EAAAA,EAAiB,CAEhBnV,OAAQkV,EAAKlV,OACbF,MAAOoV,EAAK/N,KACZjH,GAAIgV,EAAKhV,IAHJqI,EAMX,MAKkC,IAAnCoB,GAAmBvF,KAAKiE,QACvB9G,EAAAA,EAAAA,MAAC6T,EAAAA,EAAU,CAACpU,QAASqP,EAAerP,QAAQvB,SAAA,EAC1CC,EAAAA,EAAAA,KAAC6G,EAAAA,QAAM,CAAA9G,UACLC,EAAAA,EAAAA,KAACoI,EAAAA,QAAM,CAAC5F,KAAM,GAAGzC,SACO,IAArBuI,GAAUK,QACT9G,EAAAA,EAAAA,MAAApB,EAAAA,SAAA,CAAAV,SAAA,EACE8B,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,cAAaF,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,wBAEH2H,GAAkB,EAAE,IAAEY,GAAUK,OAEhCgJ,GAAkBhJ,OAAS,IAC1B9G,EAAAA,EAAAA,MAAApB,EAAAA,SAAA,CAAAV,SAAA,EACEC,EAAAA,EAAAA,KAAA,QACEC,UAAU,aACVc,MAAO,CAAE4U,WAAY,IAAK5V,SAC3B,sBAGD8B,EAAAA,EAAAA,MAAA,UACEd,MAAO,CAAE4U,WAAY,GACrBC,SAAU,SAAC/K,GAAC,OACVV,GACE0L,EAAAA,EAAAA,IAAmB9D,SAASlH,EAAE4E,OAAOxL,QACtC,EACFlE,SAAA,EAEDC,EAAAA,EAAAA,KAAA,UAAQ8V,UAAQ,EAAC7R,MAAM,UAAUC,UAAQ,EAAAnE,SAAC,sBAGzC4R,GAAkB5K,KAAI,SAACgP,EAAIlN,GAC1B,OACEhH,EAAAA,EAAAA,MAAA,UAAoBoC,MAAO8R,EAAGhW,SAAA,CAAC,MACzBgW,IADOlN,EAIjB,cAMRhH,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,YAAWF,SAAA,CACvBmR,GAAaD,eAAe,UAC3BpP,EAAAA,EAAAA,MAAApB,EAAAA,SAAA,CAAAV,SAAA,EACEC,EAAAA,EAAAA,KAAC4D,EAAAA,QAAQ,CACP7C,MAAO,CAAE8C,OAAQ,GAAIwD,aAAc,IACnChE,WACmBvC,IAAjBoQ,GACIA,GAAa1J,QACb,KAEK,IACZ0J,GAAazJ,QAIjB+J,KACCxR,EAAAA,EAAAA,KAACgW,EAAQ,CACPlJ,YAAa4E,GACb7E,aAAcmG,GAAYqC,kBAMlCrV,EAAAA,EAAAA,KAAAS,EAAAA,SAAA,CAAAV,SAEI4Q,EAAerP,SAsEftB,EAAAA,EAAAA,KAAA,MAAIC,UAAU,mBAAkBF,SAAC,oCArEjCC,EAAAA,EAAAA,KAAAS,EAAAA,SAAA,CAAAV,UAEEC,EAAAA,EAAAA,KAACiW,EAAAA,EAAS,CACRC,YACElW,EAAAA,EAAAA,KAAA,KAAAD,SAAA,aAAAW,OAEIwQ,GAAaD,eAAe,QAAO,OAAAvQ,OACxBwQ,GAAazJ,MACpB,SAIV0O,WACgC,OAA9BjF,GAAakF,cACXvU,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,OAAMF,SAAA,EACnBC,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAC4D,EAAAA,QAAQ,CACP3D,UAAU,wCACVc,MAAO,CAAE8C,OAAQ,KACjBR,MAAOgT,EAAAA,MAGTrW,EAAAA,EAAAA,KAAA,KAAAD,SAKS,iEAKT8B,EAAAA,EAAAA,MAAApB,EAAAA,SAAA,CAAAV,SAAA,EACE8B,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,mBAAkBF,SAAA,CAAC,yGAIhCC,EAAAA,EAAAA,KAAA,SAAS,0CAC+B,IACvCuQ,EAAc+F,UAEjBzU,EAAAA,EAAAA,MAACU,EAAAA,EAAS,CACRC,KAAK,QACLgB,QAAQ,EACR+S,gBAAgB,EAChBrT,SAAUgO,GAAakF,aAAarW,SAAA,EAEpCC,EAAAA,EAAAA,KAACwW,EAAAA,IAAK,IAAG,6BAKb1V,EAENkC,WAAS,EACTC,YAAW,WAAAvC,OAAauP,GACxB/M,SAAQ,iBAAAxC,OAAmBuP,GAC3B5M,MAAK,GAAA3C,OACHwQ,GAAaD,eAAe,YAAU,GAAAvQ,OACnCwQ,GAAa1J,UAElBpE,MAAK,aAAA1C,OACHwQ,GAAaD,eAAe,QAAO,OAAAvQ,OACxBwQ,GAAazJ,MACpB,iBAcE,IAArBa,GAAUK,QACK,OAAdL,SACcxH,IAAdwH,KACEzG,EAAAA,EAAAA,MAAApB,EAAAA,SAAA,CAAAV,SAAA,EACEC,EAAAA,EAAAA,KAACyW,EAAAA,EAAmB,CAAA1W,SACjB8S,KACC7S,EAAAA,EAAAA,KAAC0W,EAAAA,EAAU,CACTC,UAAQ,EACRC,aAAa,KACb3W,UAAU,eACViE,UAAQ,EACRD,MACEwE,MAAMC,QAAQJ,MACduO,EAAAA,EAAAA,IACEvO,GAAUZ,IAAiBmN,UAG/BiC,SACE5F,GAAaD,eAAe,SAC5BC,GAAazJ,KAEfsP,YAAY,MACZC,QAAS,GACTjW,MAAO,CACLkW,SAAU,GACVxU,gBAAiBG,EAAAA,GACjBC,MAAOwG,EAAAA,GACP6N,WACE,qFAOK,IAAd5O,KACE+I,IACDwB,IAC4C,IAA5CpK,MAAMC,QAAQH,MACZ1G,EAAAA,EAAAA,MAAApB,EAAAA,SAAA,CAAAV,SAAA,EAGEC,EAAAA,EAAAA,KAACmX,EAAAA,EAAO,CACN3W,GAAG,IACHI,QAAS,kBAAM2S,IAA0B,EAAK,EAACxT,SAChD,qBAGDC,EAAAA,EAAAA,KAACoX,EAAiB,CAChB5O,qBAlhBO,SAAC6O,EAAaC,EAAaC,GACtDpN,GACEqN,EAAAA,EAAAA,IAAa,CAAEC,EAAGJ,EAAaK,EAAGJ,EAAaK,cAAeJ,IAElE,EA+gBsBjP,UAAWA,GACXZ,gBAAiBA,GACjBa,yBAA0BA,QAMjCsK,KACC7S,EAAAA,EAAAA,KAAC4X,EAAkB,CACjBzP,UAAW8B,GAAmB3I,QAC9B0G,aAAc,kBAAMmC,GAASoI,EAAAA,EAAAA,KAAiB,GAAM,EACpDtK,aACEQ,MAAMC,QAAQH,UACezH,IAA7ByH,IACsB,YAAtB6I,GAG6B,KAFzB7I,GAAyB6L,QAAO,SAACqD,GAC/B,OAAOA,EAAEjT,KAAOuN,SAASX,GAC3B,IAAG,GAAGyG,eAGN,KAEN3P,eACEO,MAAMC,QAAQH,UACezH,IAA7ByH,IACsB,YAAtB6I,GAG6B,KAFzB7I,GAAyB6L,QAAO,SAACqD,GAC/B,OAAOA,EAAEjT,KAAOuN,SAASX,GAC3B,IAAG,GAAGyG,eAGN,KAENnQ,gBAAiBA,GACjBC,MAAOW,GAAUK,OACjBd,WAAY,kBAAMsC,GAAS0L,EAAAA,EAAAA,MAAqB,EAChD9N,eAAgB,kBAAMoC,GAAS2N,EAAAA,EAAAA,MAAyB,WAOpE9X,EAAAA,EAAAA,KAAC+X,EAAAA,EAAW,CACV9Q,aAAcgD,GAAmBvF,KACjCyC,KAAI,iBAAAzG,OAAmBuP,GACvB/I,aAAcgK,SAQxB,C,wOC3sBM8G,EAAmB,SAAHlY,GAA6C,IAAvCmY,EAAUnY,EAAVmY,WAAYC,EAASpY,EAAToY,UAAW/N,EAAQrK,EAARqK,SACjD,OACEnK,EAAAA,EAAAA,KAAAS,EAAAA,SAAA,CAAAV,UACE8B,EAAAA,EAAAA,MAAA,OAAA9B,SAAA,EACEC,EAAAA,EAAAA,KAACmY,EAAAA,EAAc,CAACC,UAAU,EAAM3Q,KAAI,GAAA/G,OAAKuX,EAAU,KAAAvX,OAAIwX,KACtDG,EAAAA,EAAAA,uBAAAA,KAAoC,SAACC,EAAazP,GACjD,OACE7I,EAAAA,EAAAA,KAACuY,EAAAA,EAAW,CAEVxX,MAAO,CAAEsG,aAAc,GAAImR,aAAc,IACzChD,KAAM8C,EAAY9C,KAClBnS,MAAOiV,EAAYjV,MACnBoE,KAAM6Q,EAAY7Q,OAJbgR,EAAAA,EAAAA,MAOX,IACCJ,EAAAA,EAAAA,kBAAAA,KAA+B,SAACC,EAAazP,GAC5C,OACE7I,EAAAA,EAAAA,KAACuY,EAAAA,EAAW,CAEV/C,KAAM8C,EAAY9C,KAClBnS,MAAOiV,EAAYjV,MACnBoE,KAAM6Q,EAAY7Q,OAHbgR,EAAAA,EAAAA,MAMX,KAEA5W,EAAAA,EAAAA,MAACU,EAAAA,EAAS,CACRC,KAAK,QACL5B,QAAS,kBAAMuJ,GAASuO,EAAAA,EAAAA,MAAa,EACrC3X,MAAO,CAAE0B,gBAAiB,QAASI,MAAO,SAAU9C,SAAA,EAEpDC,EAAAA,EAAAA,KAAC2Y,EAAAA,EAAM,IAAG,iBAKpB,EA6EA,IA3EA,SAAqBC,GACLA,EAAdC,eACWD,EAAXE,YAKE,IAJF/Y,EAAQ6Y,EAAR7Y,SAAQgZ,EAAAH,EACRrE,UAAAA,OAAS,IAAAwE,EAAG,GAAEA,EAAAC,EAAAJ,EACdpE,gBAAAA,OAAe,IAAAwE,OAAGlY,EAASkY,EAC3B1X,EAAOsX,EAAPtX,QAEM2X,GAAWjU,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMuL,IAAI,IAC5CtL,GAAUF,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,OAAO,IAGxCgU,EADaD,EAAnBxI,eACA/L,KACAuT,EAAwCiB,EAAxCjB,WAAYC,EAA4BgB,EAA5BhB,UAEZ/N,GAFwC+O,EAAjBC,MAAiBD,EAAV5C,OAEnBlM,EAAAA,EAAAA,OACjB,OACEvI,EAAAA,EAAAA,MAAA,QAAA9B,SAAA,EAEEC,EAAAA,EAAAA,KAACoZ,EAAAA,EAAY,CACX9V,WACEtD,EAAAA,EAAAA,KAACgY,EAAgB,CACfE,UAAWA,EACXD,WAAYA,EACZ9N,SAAUA,EACV7I,QAASA,IAGb+X,eAAe,KAEjBrZ,EAAAA,EAAAA,KAACsZ,EAAAA,EAAS,CACRhY,QAASA,EACTiY,aAAcC,EAAAA,GACdC,aAAY,GAAA/Y,OAAKuX,EAAU,KAAAvX,OAAIwX,GAC/BwB,WAAYrB,EAAAA,EAAAA,6BACZsB,UAAWtB,EAAAA,EAAAA,0BAEbrY,EAAAA,EAAAA,KAAC4Z,EAAAA,EAAa,CACZC,MACE7Z,EAAAA,EAAAA,KAACgY,EAAgB,CACfE,UAAWA,EACXD,WAAYA,EACZ9N,SAAUA,IAGd2P,OACE9Z,EAAAA,EAAAA,KAAC2E,EAAAA,EAAiB,CAAC1E,UAAU,WAAUF,UACrCC,EAAAA,EAAAA,KAAAS,EAAAA,SAAA,CAAAV,UACEC,EAAAA,EAAAA,KAACoI,EAAAA,QAAM,CAAC5F,KAAK,KAAIzC,UACf8B,EAAAA,EAAAA,MAAApB,EAAAA,SAAA,CAAAV,SAAA,MAEuBe,IAApB0T,GACCxU,EAAAA,EAAAA,KAAC+Z,EAAAA,EAAW,CACVC,eAAgBxF,EAChBpR,MAAOmR,KAGTvU,EAAAA,EAAAA,KAAC+Z,EAAAA,EAAW,CAAC3W,MAAOmR,IAErBxU,cAObC,EAAAA,EAAAA,KAACia,EAAAA,EAAU,CACThZ,QAAQ,0MACR6D,eAAgB,kBAAMqF,GAAS+P,EAAAA,EAAAA,MAAmB,EAClD/Y,KAAM+D,EAAQiV,yBAItB,C,4DClIA,KAAgB,YAAc,gCAAgC,YAAc,gC","sources":["webpack://newton-recruitment/./src/components/organisms/AppBreadcrumb/AppBreadcrumb.module.css?b4a8","components/organisms/AppBreadcrumb/AppBreadcrumb.js","components/organisms/AppBreadcrumb/AppBreadcrumbItem.js","components/organisms/AppLink/AppLink.js","components/organisms/ConfirmationModal/ConfirmationModal.js","components/organisms/EmptyData/EmptyData.js","components/organisms/PostJobConfirmation/CopyLinkInput.js","components/organisms/ReferModal/ReferModalBody.js","components/organisms/ReferModal/ReferModal.js","components/organisms/ReferModal/ReferModalFooter.js","components/organisms/SecondaryBackground/SecondaryBackground.js","components/pages/applicant/Tests/TestOutCome.js","components/organisms/NextPreviousButton/NextPreviousButton.js","webpack://newton-recruitment/./src/components/pages/applicant/Tests/Style.module.css?1fc0","components/pages/applicant/Tests/ProposedSolutions.js","components/organisms/RecordConfirmModal/RecordCondirmModal.js","components/organisms/TestTerminated/TestTerminated.js","components/organisms/AppTimer/AppTimer.js","components/pages/applicant/Tests/pagecomponents/ReportQuestForm.js","components/pages/applicant/Tests/pagecomponents/ReportQuestionModal.js","components/pages/applicant/Tests/TestStepThree.js","components/templates/TalentLayout/TalentLayout.js","webpack://newton-recruitment/./src/components/organisms/ReferModal/ReferModal.module.css?2077"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"breadcrumb\":\"AppBreadcrumb_breadcrumb__zRqbK\"};","import React from \"react\";\nimport classStyle  from \"./AppBreadcrumb.module.css\";\n\nfunction AppBreadcrumb({ children }) {\n  return (\n    <div className={classStyle.breadcrumb}>\n      <nav aria-label=\"breadcrumb\">\n        <ol className=\"breadcrumb\">{children}</ol>\n      </nav>\n    </div>\n  );\n}\n\nexport default AppBreadcrumb;\n\n\n// style=\"--bs-breadcrumb-divider: '>';\"","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nfunction AppBreadcrumbItem({ label = \"\", active = null, to = \"#\" }) {\n  const liClass = \"breadcrumb-item\";\n  return (\n    <>\n      {active ? (\n        <li className={`${liClass} ${active && \"active\"}`} aria-current=\"page\">\n        {label}\n        </li>\n      ) : (\n        <li className=\"breadcrumb-item\">\n          <NavLink className=\"test\" to={to}>{label}</NavLink>\n        </li>\n      )}\n    </>\n  );\n}\n\nexport default AppBreadcrumbItem;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction AppLink({ to, children, onClick }) {\n  return (\n    <Link onClick={onClick !== undefined ? onClick : ()=>{}} style={{ textDecoration: \"none\" }} to={to}>\n      {children}\n    </Link>\n  );\n}\n\nexport default AppLink;\n","import { LinearProgress } from \"@mui/material\";\nimport React from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport {\n  DANGER_COLOR,\n  PRIMARY_COLOR,\n  SECONDARY_LIGHT_COLOR,\n} from \"../../../constants/AppColors\";\nimport AppButton from \"../../atoms/AppButton/AppButton\";\nimport { TriangleAlert } from \"akar-icons\";\n\nfunction ConfirmationModal({\n  message,\n  message2,\n  show,\n  onHide,\n  actionButtonFn,\n  loading,\n  confirmText,\n  cancelText,\n  isDanger = true,\n  children,\n  showCancelButton = true,\n}) {\n  return (\n    <div>\n      <Modal\n        scrollable\n        contentClassName=\"\"\n        show={show}\n        backdrop=\"static\"\n        keyboard={false}\n        // onHide={() => dispatch(toggleLoginForm())}\n        onHide={onHide}\n        centered\n      >\n        {loading && <LinearProgress />}\n        <Modal.Header closeButton>\n          <span className=\"ms-auto\">{message}</span>\n        </Modal.Header>\n\n        <Modal.Body>\n          {isDanger ? (\n            <>\n              <div className=\"alert alert-danger\">\n                <h6>\n                  <TriangleAlert /> Warning\n                </h6>\n                {message2 !== undefined && message2 !== \"\" && (\n                  <>\n                    {message2}\n                    <br></br>\n                  </>\n                )}\n                You can't undo this action.\n              </div>\n            </>\n          ) : (\n            <p className=\"text-center\">{message2}</p>\n          )}\n\n          {children !== undefined && children}\n        </Modal.Body>\n\n        <Modal.Footer>\n          <div className=\"d-flex mb-2 flex-row-reverse w-100\">\n            <div className=\"p-1 w-100\">\n              <AppButton\n                className=\"w-100\"\n                size=\"small\"\n                loading={loading}\n                // color={DANGER_COLOR}\n                backgroundColor={isDanger ? DANGER_COLOR : PRIMARY_COLOR}\n                // style={{ borderColor:isDanger && DANGER_COLOR  ,color:isDanger && DANGER_COLOR}}\n                onClick={actionButtonFn}\n              >\n                {confirmText !== undefined ? confirmText : <>Delete</>}\n              </AppButton>\n            </div>\n\n            {showCancelButton && (\n              <div className=\"p-1 w-100\">\n                <AppButton\n                  className=\"w-100\"\n                  backgroundColor={SECONDARY_LIGHT_COLOR}\n                  color=\"transparent\"\n                  size=\"small\"\n                  loading={loading}\n                  onClick={onHide}\n                >\n                  {cancelText !== undefined ? cancelText : <>Cancel</>}\n                </AppButton>\n              </div>\n            )}\n          </div>\n        </Modal.Footer>\n      </Modal>\n    </div>\n  );\n}\n\nexport default ConfirmationModal;\n","import React from \"react\";\nimport {\n  PRIMARY_COLOR,\n  SECONDARY_LIGHT_COLOR,\n} from \"../../../constants/AppColors\";\nimport { EMPTY_IMG } from \"../../../constants/AppImages\";\nimport AppButton from \"../../atoms/AppButton/AppButton\";\nimport SecondaryButton from \"../../atoms/AppButton/SecondaryButton\";\nimport AppImage from \"../AppImage/AppImage\";\n\nfunction EmptyData({\n  message = \"\",\n  hasAction = false,\n  actionLabel,\n  linkPath,\n  title=\"\",\n  image,\n  component,\n}) {\n  return (\n    <>\n      {component !== undefined ? (\n        <div\n          // style={{  }}\n          className=\"border p-5 rounded\"\n        >\n          {component}\n\n          {hasAction && (\n            <SecondaryButton\n              size=\"small\"\n              isLink\n              linkPath={linkPath}\n              style={{\n                backgroundColor: SECONDARY_LIGHT_COLOR,\n                color: \"black\",\n              }}\n            >\n              {actionLabel}\n            </SecondaryButton>\n          )}\n        </div>\n      ) : (\n        <div\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            flexDirection: \"column\",\n          }}\n          className=\"border p-5 rounded\"\n        >\n          <AppImage\n            className=\"animate__animated animate__pulse mb-3\"\n            style={{ height: 70, opacity: image === undefined ? \".4\" : \"1\" }}\n            image={image === undefined ? EMPTY_IMG : image}\n          />\n          <p className=\"fs-5 text-center\" style={{ color: PRIMARY_COLOR }}>\n            {title}\n          </p>\n\n          <p className=\"fs-6 text-muted text-center\">{message}</p>\n\n          {hasAction && (\n            <SecondaryButton\n              size=\"small\"\n              isLink\n              linkPath={linkPath}\n              style={{\n                backgroundColor: SECONDARY_LIGHT_COLOR,\n                color: \"black\",\n              }}\n            >\n              {actionLabel}\n            </SecondaryButton>\n          )}\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default EmptyData;\n","import { Copy } from \"akar-icons\";\nimport React from \"react\";\nimport { toast } from \"react-toastify\";\nimport \"./PostJobSuccess.css\"\n\nfunction CopyLinkInput({ url }) {\n  const copyText = () => {\n    navigator.clipboard.writeText(url);\n    toast.info(\"Link copied\", 1000);\n  };\n  return (\n    <div>\n      <div className=\"input-group\">\n        <input\n          value={url}\n          disabled\n          type=\"text\"\n          className=\"form-control\"\n          aria-describedby=\"basic-addon1\"\n        />\n\n        <button\n          onClick={() => copyText()}\n          className=\"input-group-text\"\n          id=\"basic-addon1\"\n        >\n          <Copy />\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default CopyLinkInput;\n","import React from \"react\";\nimport AppContainerFluid from \"../AppContainerFluid/AppContainerFluid\";\nimport CopyLinkInput from \"../PostJobConfirmation/CopyLinkInput\";\n\nfunction ReferModalBody({ data }) {\n  return (\n    <AppContainerFluid>\n      <center>\n        <h5>Refer a friend</h5>\n        <span className=\"text-muted\">Refer a friend to Newton Recruitment</span>\n      </center>\n\n      <div className=\"mt-3 mb-3\">\n        <CopyLinkInput url={process.env.REACT_APP_WEB_URL}></CopyLinkInput>\n      </div>\n    </AppContainerFluid>\n  );\n}\n\nexport default ReferModalBody;\n","import React from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { useSelector } from \"react-redux\";\nimport classStyle from \"./ReferModal.module.css\";\nimport ReferModalBody from \"./ReferModalBody\";\nimport ReferModalFooter from \"./ReferModalFooter\";\n\nfunction ReferModal({ show, toggleFunction,message }) {\n  let appData = useSelector((state) => state.appData);\n  let { refer_form_array } = appData;\n  return (\n    <div>\n      <Modal\n        scrollable\n        contentClassName={classStyle.refer_modal}\n        show={show}\n        onHide={toggleFunction}\n        centered\n      >\n        <Modal.Body>\n          <ReferModalBody data={refer_form_array}></ReferModalBody>\n          <ReferModalFooter shareTitle={message} />\n        </Modal.Body>\n      </Modal>\n    </div>\n  );\n}\n\nexport default ReferModal;\n","import React from \"react\";\nimport AppContainerFluid from \"../AppContainerFluid/AppContainerFluid\";\nimport AppRow from \"../AppRow/AppRow\";\nimport classStyles from \"./ReferModal.module.css\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport {\n  WhatsappShareButton,\n  TelegramShareButton,\n  TwitterShareButton,\n  LinkedinShareButton,\n  TwitterIcon,\n  WhatsappIcon,\n  FacebookIcon,\n  TelegramIcon,\n  LinkedinIcon,\n  FacebookShareButton,\n  InstapaperShareButton,\n  InstapaperIcon,\n} from \"react-share\";\n\nfunction ReferModalFooter({\n  shareUrl = process.env.REACT_APP_WEB_URL,\n  heading,\n  quote = \"Newton\",\n  shareTitle = \"Newton\",\n  hashtags = [\"newton\"],\n}) {\n  let REFERALs = [\n    {\n      id: uuidv4(),\n      component: (\n        <WhatsappShareButton title={shareTitle} url={shareUrl}>\n          <WhatsappIcon quote={quote} size={32} round={true} />\n        </WhatsappShareButton>\n      ),\n    },\n    {\n      id: uuidv4(),\n      component: (\n        <FacebookShareButton quote={quote} url={shareUrl}>\n          <FacebookIcon size={32} round={true} />\n        </FacebookShareButton>\n      ),\n    },\n\n    {\n      id: uuidv4(),\n      component: (\n        <LinkedinShareButton title={shareTitle} url={shareUrl}>\n          <LinkedinIcon size={32} round={true} />\n        </LinkedinShareButton>\n      ),\n    },\n    {\n      id: uuidv4(),\n      component: (\n        <TwitterShareButton\n          hashtags={hashtags}\n          title={shareTitle}\n          url={shareUrl}\n        >\n          <TwitterIcon size={32} round={true} />\n        </TwitterShareButton>\n      ),\n    },\n    {\n      id: uuidv4(),\n      component: (\n        <TelegramShareButton title={shareTitle} url={shareUrl}>\n          <TelegramIcon size={32} round={true} />\n        </TelegramShareButton>\n      ),\n    },\n    {\n      id: uuidv4(),\n      component: (\n        <InstapaperShareButton title={shareTitle} url={shareUrl}>\n          <InstapaperIcon size={32} round={true} />\n        </InstapaperShareButton>\n      ),\n    },\n  ];\n\n  return (\n    <div>\n      <AppContainerFluid>\n        {}\n        <center>\n          <span className=\"text-muted text-center\">You can share via</span>\n        </center>\n\n        <AppRow className={classStyles.footerIcons}>\n          {REFERALs.map((ref) => {\n            return (\n              <div key={ref.id} className=\"mt-1\">\n                {ref.component}\n              </div>\n            );\n          })}\n        </AppRow>\n      </AppContainerFluid>\n    </div>\n  );\n}\n\nexport default ReferModalFooter;\n","import React from \"react\";\nimport AppContainerFluid from \"../AppContainerFluid/AppContainerFluid\";\nimport AppRow from \"../AppRow/AppRow\";\nimport \"./SecondaryBackground.css\";\n\nfunction SecondaryBackground({ children, style, className }) {\n  return (\n    <div id=\"secondary_bg\" style={style} className={className}>\n      <AppContainerFluid>\n          <>{children}</>\n      </AppContainerFluid>\n    </div>\n  );\n}\n\nexport default SecondaryBackground;\n","import React from \"react\";\nimport { PARTYING_FACE_SVG, SAD_FACE_SVG } from \"../../../../constants/AppSvg\";\nimport AppButton from \"../../../atoms/AppButton/AppButton\";\nimport AppImage from \"../../../organisms/AppImage/AppImage\";\nimport \"./TestStepTwo.css\";\nfunction TestOutCome({ test_outcome, skillDetails, path }) {\n  return (\n    <div className=\"test_outcome\">\n      {/* Outcome- {JSON.stringify(test_outcome)} */}\n      {test_outcome.pass_test ? (\n        <AppImage\n          style={{ height: 100, borderRadius: 10 }}\n          image={PARTYING_FACE_SVG}\n        ></AppImage>\n      ) : (\n        <AppImage\n          style={{ height: 100, borderRadius: 10 }}\n          image={SAD_FACE_SVG}\n        ></AppImage>\n      )}\n      <br></br>\n      <h5>\n        {test_outcome.pass_test ? \"Test Passed Successfully\" : \"Test Failed!\"}\n      </h5>\n      <hr></hr>\n      <p>You have completed your test assessment on given stack</p>\n      <div>\n        <AppImage\n          style={{ height: 20, borderRadius: 10 }}\n          image={skillDetails !== undefined ? skillDetails.picture : \"\"}\n        ></AppImage>{\" \"}\n        {skillDetails.name}\n      </div>\n      <br></br>\n      {/* SCORE - {test_outcome.percent} % */}\n      <h5>{test_outcome.pass_test ? \"Passed\" : \"Failed!\"}</h5>\n      <AppButton size=\"small\" isLink linkPath={path}>\n        RETURN TO HOME\n      </AppButton>\n    </div>\n  );\n}\n\nexport default TestOutCome;\n","import React from \"react\";\nimport { DARK_PRIMARY } from \"../../../constants/AppColors\";\nimport AppButton from \"../../atoms/AppButton/AppButton\";\nimport AppCol from \"../AppCol/AppCol\";\nimport AppRow from \"../AppRow/AppRow\";\n\nfunction NextPreviousButton({\n  currentQuestion,\n  count,\n  handleNext = {},\n  handlePrevious = {},\n  nextDisabled,\n  finishDisabled,\n  handleFinish,\n  isLoading,\n}) {\n  return (\n    <AppRow>\n      <AppCol>\n      {/* state.currentQuestion */}\n        {currentQuestion !== 0 && (\n          <div className=\"float-start\">\n            <AppButton\n              loading={isLoading}\n              style={{ backgroundColor: DARK_PRIMARY }}\n              size=\"small\"\n              onClick={handlePrevious}\n              label=\"Previous\"\n            ></AppButton>\n\n           \n          </div>\n        )}\n\n        {/* {currentQuestion}\n      {count} */}\n\n        {/* {JSON.stringify(nextDisabled)} */}\n\n        <div className=\"float-end\">\n          {currentQuestion + 1 !== count ? (\n            <AppButton\n              loading={isLoading}\n              // disabled={nextDisabled}\n              size=\"small\"\n              onClick={handleNext}\n              label=\"Next\"\n            ></AppButton>\n          ) : (\n            <AppButton\n              loading={isLoading}\n              onClick={handleFinish}\n              // disabled={finishDisabled}\n              size=\"small\"\n              label=\"Finish\"\n            ></AppButton>\n          )}\n        </div>\n      </AppCol>\n    </AppRow>\n  );\n}\n\nexport default NextPreviousButton;\n","// extracted by mini-css-extract-plugin\nexport default {\"button_option\":\"Style_button_option__JnDeK\"};","import React from \"react\";\nimport {\n  GRAY_COLOR_ONE,\n  PRIMARY_COLOR_LIGHT,\n  SECONDARY_LIGHT_COLOR,\n} from \"../../../../constants/AppColors\";\nimport { getSolutionAnswered } from \"../../../../constants/utils\";\nimport AppButton from \"../../../atoms/AppButton/AppButton\";\nimport AppCol from \"../../../organisms/AppCol/AppCol\";\nimport AppRow from \"../../../organisms/AppRow/AppRow\";\nimport AppDivButton from \"../../../atoms/AppButton/AppDivButton\";\nimport styles from \"./Style.module.css\"\nfunction ProposedSolutions({\n  questions,\n  currentQuestion,\n  question_solution_answer,\n  handleSelectQuestion,\n}) {\n  return (\n    <div>\n      {/* {JSON.stringify(question_solution_answer)} */}\n      <center>\n        {/* Check if the length of the solutions is not 0, Only display solutions if there are any */}\n        {Array.isArray(questions[currentQuestion][\"proposal_solutions\"]) &&\n          questions[currentQuestion][\"proposal_solutions\"].length !== 0 && (\n            <>\n              <h5>Select an answer</h5>\n              <hr></hr>\n              <AppRow className=\"\">\n                {Array.isArray(\n                  questions[currentQuestion][\"proposal_solutions\"]\n                ) &&\n                  questions[currentQuestion][\"proposal_solutions\"].map(\n                    (ans, index) => {\n                      return (\n                        <AppCol key={index} size={3} sm_size={4} xs_size={12} md_size={6} lg_size={6}>\n                          <AppDivButton\n                            onClick={() =>\n                              handleSelectQuestion(\n                                questions[currentQuestion].id,\n                                ans.id,\n                                index\n                              )\n                            }\n                            style={{\n                              backgroundColor: getSolutionAnswered(\n                                question_solution_answer,\n                                ans.id\n                              )\n                                ? PRIMARY_COLOR_LIGHT\n                                : SECONDARY_LIGHT_COLOR,\n                              color: GRAY_COLOR_ONE,\n                              width: \"100%\",\n                              height: \"auto\",\n                            }}\n                            size=\"small\"\n                            className={`p-3 ${styles.button_option}`}\n                          >\n                            <>\n                              <div>{ans.text} </div>\n                            </>\n                          </AppDivButton>\n                        </AppCol>\n                      );\n                    }\n                  )}\n              </AppRow>\n            </>\n          )}\n      </center>\n    </div>\n  );\n}\n\nexport default ProposedSolutions;\n","import { LinearProgress } from \"@mui/material\";\nimport React, { useEffect } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport { Modal } from \"react-bootstrap\";\nimport {\n  useReactMediaRecorder,\n} from \"react-media-recorder\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { toast } from \"react-toastify\";\nimport {\n  setRecordBlob,\n  TalentRecordSkill,\n  toggleIsRecording,\n  toggleShowRecordingModal,\n} from \"../../../app-redux/features/Questions/questionsSlice\";\nimport {\n  PRIMARY_COLOR,\n  SECONDARY_COLOR,\n  SECONDARY_LIGHT_COLOR,\n} from \"../../../constants/AppColors\";\nimport { CHANGE_TAB } from \"../../../constants/AppImages\";\nimport {\n  blobToFile,\n  JsonToformData,\n} from \"../../../constants/utils\";\nimport AppButton from \"../../atoms/AppButton/AppButton\";\nimport { useState } from \"react\";\n\nfunction RecordCondirmModal({\n  message = \"Start test\",\n  message2,\n  show,\n  onHide,\n  actionButtonFn,\n  loading,\n  confirmText,\n  cancelText,\n  skill\n  //   startRecordingFn\n}) {\n  const [isMobile,SetIsMobile] = useState(false)\n  const questionData = useSelector((state) => state.questions);\n  const { postMyAnswersState, testTerminated } = questionData;\n\n\n\n  const dispatch = useDispatch();\n\n  const { status, startRecording, stopRecording, mediaBlobUrl } =\n    useReactMediaRecorder({\n      screen: true,\n      audio:false,\n      onStart: () => {\n        dispatch(toggleIsRecording());\n        toast.success(\"Recording started...\", 1000);\n        dispatch(toggleShowRecordingModal(false));\n      },\n      onStop: (e) => {\n     \n        let blob = fetch(e).then((r) => r.blob());\n      \n        blob.then((res) => {\n          let file_name = `file_${uuidv4()}.mp4`\n          const myFile = new File([res], file_name, {\n            type: res.type,\n          });\n\n          // get file size of the blob\n\n          let file = blobToFile(res, `${new Date()}_recording`);\n          // console.log({res});\n          // var _size = file.size;\n          // var fSExt = new Array(\"Bytes\", \"KB\", \"MB\", \"GB\"),\n          //   i = 0;\n          // while (_size > 900) {\n          //   _size /= 1024;\n          //   i++;\n          // }\n          // var exactSize = Math.round(_size * 100) / 100 + \" \" + fSExt[i];\n\n          // end get file size of the blob\n\n\n          // POST the file to the backemnd\n          let data_to_post = JsonToformData({ video: myFile ,skill:skill.id});\n          dispatch(TalentRecordSkill({ data: data_to_post })).unwrap()\n          .then((res)=>{\n            toast.success(\"Recording has been saved!\")\n          })\n\n          dispatch(setRecordBlob(file));\n        });\n        // console.log(blob)\n        toast.info(\"Recording stopped...\", 1000);\n      },\n    });\n\n  useEffect(() => {\n    if (postMyAnswersState.success || testTerminated) {\n      stopRecording();\n    }\n  }, [postMyAnswersState.success, testTerminated]);\n\n  //   console.log(status);\n\n  useEffect(() => {\n    if (mediaBlobUrl !== undefined && mediaBlobUrl !== \"\") {\n      // console.log({ mediaBlobUrl });\n\n      dispatch(setRecordBlob(mediaBlobUrl));\n\n      let blob = fetch(mediaBlobUrl).then((r) => r.blob());\n      // console.log(blob)\n\n      blob.then((res) => {\n        // console.log(res)\n      });\n    }\n  }, [mediaBlobUrl]);\n\n  useEffect(()=>{\n    \n    const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\nif (isMobile) {\n  SetIsMobile(true)\n  /* your code here */\n}\n  },[])\n\n  return (\n    <div>\n      <Modal\n        size=\"lg\"\n        scrollable\n        contentClassName=\"\"\n        show={show}\n        onHide={onHide}\n        centered\n      >\n        {loading && <LinearProgress />}\n        <Modal.Header closeButton>\n          <span className=\"ms-auto\">{message}</span>\n        </Modal.Header>\n\n        <Modal.Body>\n          {\n            isMobile ? <>\n            <p className=\"text-center\">\n           This module requires you to use a laptop device and not a mobile phone\n          </p>\n            </> : <>\n            <p className=\"text-center\">\n            {message2}\n          </p>\n          <div>\n            <center>\n              <img\n                className=\"p-3\"\n                style={{ width: \"50%\", backgroundColor: SECONDARY_COLOR }}\n                src={CHANGE_TAB}\n              ></img>\n            </center>\n          </div>\n\n          <hr></hr>\n\n          <div class=\"alert alert-warning text-center\" role=\"alert\">\n            As demonstrated above, kindly note that changing of the browser's\n            tab or navigating to another window is not allowed and could lead to\n            termination of the test\n          </div>\n\n          <hr></hr>\n          <p className=\"text-center\">\n            This module requires for you to allow the browser to record your\n            screen.\n          </p>\n\n          <div className=\"d-flex flex-row mb-3 justify-content-around\">\n            {/* <p>{status}</p> */}\n            <div className=\"d-flex flex-row mb-3 justify-content-around\">\n              <div className=\"p-2\">\n                <AppButton\n                  size=\"small\"\n                  loading={loading}\n                  backgroundColor={PRIMARY_COLOR}\n                  onClick={startRecording}\n                  label={\n                    confirmText !== undefined\n                      ? confirmText\n                      : \"Start Test With Recording\"\n                  }\n                ></AppButton>\n              </div>\n              <div className=\"p-2\">\n                <AppButton\n                  backgroundColor={SECONDARY_LIGHT_COLOR}\n                  color=\"transparent\"\n                  size=\"small\"\n                  loading={loading}\n                  onClick={onHide}\n                  label={cancelText !== undefined ? cancelText : \"Back\"}\n                ></AppButton>\n              </div>\n            </div>\n          </div>\n            </>\n          }\n          \n        </Modal.Body>\n      </Modal>\n    </div>\n  );\n}\n\nexport default RecordCondirmModal;\n","import { LinearProgress } from \"@mui/material\";\nimport React from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { PRIMARY_COLOR } from \"../../../constants/AppColors\";\nimport AppButton from \"../../atoms/AppButton/AppButton\";\n\nfunction TestTerminatedModal({ onHide,loading,show }) {\n  return (\n    <div>\n      <Modal\n        scrollable\n        contentClassName=\"\"\n        show={show}\n        onHide={onHide}\n        centered\n      >\n        {loading && <LinearProgress />}\n        <Modal.Header closeButton>\n          <span className=\"ms-auto\">Test Terminated!</span>\n        </Modal.Header>\n\n        <Modal.Body>\n          <p className=\"text-center\">Your test has been stopped because you opened another tab.</p>\n\n\n          <div className=\"d-flex flex-row mb-3 justify-content-around\">\n            <div className=\"d-flex flex-row mb-3 justify-content-around\">\n              <div className=\"p-2\">\n                <AppButton\n                  size=\"small\"\n                  loading={loading}\n                  backgroundColor={PRIMARY_COLOR}\n                  onClick={onHide}\n                  label=\"Okay\"\n                ></AppButton>\n              </div>\n            \n            </div>\n          </div>\n        </Modal.Body>\n      </Modal>\n    </div>\n  );\n}\n\nexport default TestTerminatedModal;\n","import React, { useState, useRef, useEffect } from 'react'\nimport { useDispatch } from 'react-redux';\nimport { toggleTimer } from '../../../app-redux/features/Questions/questionsSlice';\nimport \"./AppTimer.css\"\n\nfunction AppTimer({timeDuration=30,redux_timer}) {\n    let dispatch = useDispatch();\n  const Ref = useRef(null);\n\n  // The state for our timer\n  const [timer, setTimer] = useState(\"00:00:00\");\n\n  const getTimeRemaining = (e) => {\n    const total = Date.parse(e) - Date.parse(new Date());\n    const seconds = Math.floor((total / 1000) % 60);\n    const minutes = Math.floor((total / 1000 / 60) % 60);\n    const hours = Math.floor((total / 1000 / 60 / 60) % 24);\n    return {\n      total,\n      hours,\n      minutes,\n      seconds,\n    };\n  };\n\n  const startTimer = (e) => {\n    let { total, hours, minutes, seconds } = getTimeRemaining(e);\n    if (total >= 0) {\n      // update the timer\n      // check if less than 10 then we need to\n      // add '0' at the beginning of the variable\n      setTimer(\n        (hours > 9 ? hours : \"0\" + hours) +\n          \":\" +\n          (minutes > 9 ? minutes : \"0\" + minutes) +\n          \":\" +\n          (seconds > 9 ? seconds : \"0\" + seconds)\n      );\n\n      dispatch(toggleTimer((hours > 9 ? hours : \"0\" + hours) +\n      \":\" +\n      (minutes > 9 ? minutes : \"0\" + minutes) +\n      \":\" +\n      (seconds > 9 ? seconds : \"0\" + seconds)))\n    }\n  };\n\n  const clearTimer = (e) => {\n    // If you adjust it you should also need to\n    // adjust the Endtime formula we are about\n    // to code next\n    setTimer(`00:${timeDuration}:00`);\n    dispatch(toggleTimer(`00:${timeDuration}:00`))\n\n    // If you try to remove this line the\n    // updating of timer Variable will be\n    // after 1000ms or 1sec\n    if (Ref.current) clearInterval(Ref.current);\n    const id = setInterval(() => {\n      startTimer(e);\n    }, 1000);\n    Ref.current = id;\n  };\n\n  const getDeadTime = () => {\n    let deadline = new Date();\n\n    // This is where you need to adjust if\n    // you entend to add more time\n    let _seconds = timeDuration *60\n    deadline.setSeconds(deadline.getSeconds() + _seconds);\n    return deadline;\n  };\n\n  // We can use useEffect so that when the component\n  // mount the timer will start as soon as possible\n\n  // We put empty array to act as componentDid\n  // mount only\n  useEffect(() => {\n    clearTimer(getDeadTime());\n  }, []);\n\n  // Another way to call the clearTimer() to start\n  // the countdown is via action event from the\n  // button first we create function to be called\n  // by the button\n  const onClickReset = () => {\n    clearTimer(getDeadTime());\n  };\n  return (\n    <div id=\"app_timer_div\">\n      <span>{redux_timer}</span>\n    </div>\n  );\n}\n\nexport default AppTimer;\n","import React from \"react\";\nimport AppRow from \"../../../../organisms/AppRow/AppRow\";\nimport AppCol from \"../../../../organisms/AppCol/AppCol\";\nimport FormInputRenderer from \"../../../../organisms/FormRenderer/FormInputRenderer\";\n\nfunction ReportQuestForm({ data, onChangeForm }) {\n  return (\n    <div>\n      {Array.isArray(data) &&\n        data.map((input_row, input_row_index) => {\n          return (\n            <AppRow className=\"gx-5\" key={input_row.id}>\n              {input_row.children.map((child_input, child_index) => {\n                if (child_input.hidden !== true) {\n                  return (\n                    <AppCol size={12 / input_row.colums} key={child_input.id}>\n                      <FormInputRenderer\n                        handleChange={\n                          child_input.type === \"text-area\"\n                            ? onChangeForm\n                            : () => {}\n                        }\n                        type={child_input.type}\n                        metaData={{\n                          meta: {\n                            RowKey: input_row_index,\n                            ChildKey: child_index,\n                          },\n\n                          label: child_input.label,\n                          value: child_input.value,\n                          name: child_input.name,\n                          input_type: child_input.input_type,\n                          inputId: \"settings_input_fields\",\n                          data: child_input.data,\n                          type: child_input.input_type,\n                        }}\n                      ></FormInputRenderer>\n                    </AppCol>\n                  );\n                }\n              })}\n            </AppRow>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default ReportQuestForm;\n","// import { LinearProgress } from \"@mui/material\";\n// import React from \"react\";\nimport { LinearProgress } from \"@mui/material\";\nimport { Modal } from \"react-bootstrap\";\nimport AppButton from \"../../../../atoms/AppButton/AppButton\";\nimport { PRIMARY_COLOR } from \"../../../../../constants/AppColors\";\nimport ReportQuestForm from \"./ReportQuestForm\";\nimport { handleOnChangeTextInput_Question_Slice } from \"../../../../../app-redux/features/Questions/questionsSlice\";\n// import { PRIMARY_COLOR } from \"../../../constants/AppColors\";\n// import AppButton from \"../../atoms/AppButton/AppButton\";\n\nfunction ReportQuestionModal({\n  onHide,\n  loading,\n  show,\n  formData,\n  dispatch,\n  reportFn,\n}) {\n  const handleFormChange = (e, meta) => {\n    // console.log(e.target.value)\n    // console.log(e.target.name)\n\n    let { value, name } = e.target;\n    const { RowKey, ChildKey } = meta;\n\n    dispatch(\n      handleOnChangeTextInput_Question_Slice({\n        state: \"report_question\",\n        valueToUpdate: value,\n        KeyName: name,\n        RowKey: RowKey,\n        ChildKey,\n      })\n    );\n  };\n\n  return (\n    <div>\n      <Modal\n        scrollable\n        contentClassName=\"\"\n        show={show}\n        onHide={onHide}\n        centered\n        size=\"lg\"\n      >\n        {loading && <LinearProgress />}\n        <Modal.Header closeButton>\n          <span className=\"ms-auto\">Report Question</span>\n        </Modal.Header>\n\n        <Modal.Body>\n          <ReportQuestForm\n            onChangeForm={handleFormChange}\n            data={formData}\n          ></ReportQuestForm>\n\n          <AppButton\n            size=\"small\"\n            loading={loading}\n            backgroundColor={PRIMARY_COLOR}\n            onClick={() => reportFn()}\n            label=\"Submit\"\n            className=\"w-100\"\n          ></AppButton>\n        </Modal.Body>\n      </Modal>\n    </div>\n  );\n}\n\nexport default ReportQuestionModal;\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport {\n  AddSkillToResult,\n  ExtractFieldsFromFormData,\n  FormatDate,\n  JsonToformData,\n  removeNumberBeginingOfText,\n} from \"../../../../constants/utils\";\nimport { setOfflineLocalStorage } from \"../../../../constants/OfflineStorage\";\nimport AppBreadcrumb from \"../../../organisms/AppBreadcrumb/AppBreadcrumb\";\nimport AppBreadcrumbItem from \"../../../organisms/AppBreadcrumb/AppBreadcrumbItem\";\nimport SecondaryBackground from \"../../../organisms/SecondaryBackground/SecondaryBackground\";\nimport WhiteBgDiv from \"../../../organisms/WhiteBgDiv/WhiteBgDiv\";\nimport TalentLayout from \"../../../templates/TalentLayout/TalentLayout\";\nimport CodeEditor from \"@uiw/react-textarea-code-editor\";\nimport {\n  GRAY_COLOR_ONE,\n  SECONDARY_LIGHT_COLOR,\n} from \"../../../../constants/AppColors\";\nimport NextPreviousButton from \"../../../organisms/NextPreviousButton/NextPreviousButton\";\nimport {\n  getQuestions,\n  loadQuestionSolution,\n  PostMyAnswers,\n  resetQuestion,\n  selectAnswer,\n  TalentReportQuestion,\n  toggleFinishTest,\n  toggleHasStartedTest,\n  toggleIsRecording,\n  toggleNextQuestion,\n  togglePreviousQuestion,\n  toggleShowRecordingModal,\n  toggleStartedTestModal,\n  toggleTabHasChanged,\n  toggleTestTerminated,\n  toggleTimer,\n  togglOpenReportModal,\n  updateCurrentQuestionID,\n} from \"../../../../app-redux/features/Questions/questionsSlice\";\nimport AppRow from \"../../../organisms/AppRow/AppRow\";\nimport AppCol from \"../../../organisms/AppCol/AppCol\";\nimport { useEffect } from \"react\";\nimport AppImage from \"../../../organisms/AppImage/AppImage\";\nimport ProposedSolutions from \"./ProposedSolutions\";\nimport TestOutCome from \"./TestOutCome\";\nimport EmptyData from \"../../../organisms/EmptyData/EmptyData\";\nimport RecordCondirmModal from \"../../../organisms/RecordConfirmModal/RecordCondirmModal\";\nimport { DUMMY_DATA } from \"../../../../constants/dummyData/dummyData\";\nimport { getSkillByID } from \"../../../../app-redux/features/Skill/skillSlice\";\nimport TestTerminatedModal from \"../../../organisms/TestTerminated/TestTerminated\";\nimport { TALENT_ROUTE } from \"../../../../routes/RouteLinks\";\nimport AppTimer from \"../../../organisms/AppTimer/AppTimer\";\nimport ConfirmationModal from \"../../../organisms/ConfirmationModal/ConfirmationModal\";\nimport { useRef } from \"react\";\nimport AppButton from \"../../../atoms/AppButton/AppButton\";\nimport { Globe } from \"akar-icons\";\nimport { TEST_GORILLA_IMAGE } from \"../../../../constants/AppImages\";\nimport AppLink from \"../../../organisms/AppLink/AppLink\";\nimport ReportQuestionModal from \"./pagecomponents/ReportQuestionModal\";\nimport { toast } from \"react-toastify\";\n\nfunction TestStepThree() {\n  const navigate = useNavigate();\n  // get the testID and skillID from the location params\n  let { testID, skillID } = useParams();\n  let [TestValidated, SetTestValidated] = useState(undefined);\n  const effectskillID = useRef(false);\n\n  let dispatch = useDispatch();\n  const skillData = useSelector((state) => state.skill);\n  const authData = useSelector((state) => state.auth);\n  let { loginUserState } = authData;\n  let { data: loginUserData } = loginUserState;\n\n  const questionData = useSelector((state) => state.questions);\n  const { skillsState, skillByIDState } = skillData;\n  const { data: skills } = skillsState;\n  const { data: skillByIDData } = skillByIDState;\n  let TalentProfile = useSelector((state) => state.TalentProfile);\n\n  const { talentState } = TalentProfile;\n  const { data: talentStateData } = talentState;\n  let test_validation = talentStateData.hasOwnProperty(\"test_validation\")\n    ? talentStateData.test_validation\n    : [];\n  // console.log(talentState)\n  // End of getting data from redux store\n\n  // Check if skillByIDData has data, if yes, set focusedSkill as skillByIDData\n  let focusedSkill = skillByIDData.hasOwnProperty(\"id\") && skillByIDData;\n\n  const {\n    questionsState,\n    currentQuestion,\n    currentQuestionID,\n    postMyAnswersState,\n    showRecordingModal,\n    isRecording,\n    testTerminated,\n    showConfirmFinishTest,\n    hasStartedTest,\n    startTestModal,\n    app_timer,\n    questionsAnswered,\n    showReportQuestionModal,\n    report_form,\n  } = questionData;\n  let { data: questions } = questionsState;\n\n  useEffect(() => {\n    if (skillID !== undefined) {\n      if (!effectskillID.current) {\n        //Get Skill details by ID\n        dispatch(getSkillByID({ id: parseInt(skillID) }));\n\n        //get questions based on the skill_id\n        dispatch(getQuestions({ skill_id: skillID }));\n      }\n    }\n    return () => {\n      effectskillID.current = true;\n    };\n  }, [skillID]);\n\n  useEffect(() => {\n    // console.log(allquestions)\n    if (questions.length !== 0) {\n      //adding skill details to the questions\n      let allquestions =\n        questions.length !== 0 ? AddSkillToResult(questions) : [];\n      if (Array.isArray(allquestions)) {\n        dispatch(loadQuestionSolution(allquestions));\n      }\n    }\n  }, [questions]);\n\n  useEffect(() => {\n    //reset the question in focus when one leaves the page\n    return () => {\n      dispatch(resetQuestion());\n      dispatch(toggleHasStartedTest(null));\n      dispatch(toggleFinishTest(null));\n    };\n  }, []);\n\n  const handleSelectQuestion = (question_id, solution_id, solIndex) => {\n    dispatch(\n      selectAnswer({ q: question_id, s: solution_id, solutionIndex: solIndex })\n    );\n  };\n\n  const { question_solution_answer } = questionData;\n\n  const handlePostMyAnswers = () => {\n    dispatch(\n      PostMyAnswers({\n        skill: focusedSkill.id,\n        quest_solutions: question_solution_answer,\n      })\n    )\n      .unwrap()\n      .then((res) => {\n        // dispatch(toggleTimer(\"00:00:00\"))\n        setOfflineLocalStorage(\"recent_test\", {\n          skill: focusedSkill,\n          res: res,\n          testID: testID,\n        });\n        navigate(`/${TALENT_ROUTE.index}${TALENT_ROUTE.recenttest}`);\n      });\n  };\n\n  useEffect(() => {\n    if (showQuestions) {\n      if (app_timer === \"00:00:00\") {\n        handlePostMyAnswers();\n      }\n    }\n  }, [app_timer]);\n\n  useEffect(() => {\n    if (Array.isArray(questions) && questions !== undefined) {\n      // console.log(questions[currentQuestion])\n\n      if (questions[currentQuestion] !== undefined) {\n        dispatch(updateCurrentQuestionID(questions[currentQuestion].id));\n      } else {\n        // console.log(\"zzzz\")\n      }\n    } else {\n      // console.log(\"zzzz\")\n    }\n  }, [questions, question_solution_answer, currentQuestion]);\n\n  let links = [\n    {\n      name: \"Test\",\n      to: \"/talent/tests\",\n      active: false,\n    },\n    {\n      name: testID,\n      to: `/talent/tests/${testID}`,\n      active: false,\n    },\n\n    {\n      name: focusedSkill !== undefined ? focusedSkill.name : \"\",\n      to: \"/\",\n      active: true,\n    },\n  ];\n\n  let focusedTest = DUMMY_DATA.tests[0].children.filter((t) => {\n    return t.name === testID;\n  })[0];\n\n  let [showQuestions, SetShowQuestions] = useState(null);\n\n  useEffect(() => {\n    if (isRecording) {\n      // console.log(\"recoding!\");\n      dispatch(toggleHasStartedTest(true));\n    }\n  }, [isRecording]);\n\n  useEffect(() => {\n    // handle when to show questions to the user\n    if (focusedTest.recording !== undefined) {\n      if (focusedTest.recording && isRecording) {\n        SetShowQuestions(true);\n      } else {\n        SetShowQuestions(false);\n      }\n\n      // if (!focusedTest.recording) {\n      //   SetShowQuestions(true);\n      // }\n\n      if (hasStartedTest) {\n        SetShowQuestions(true);\n      }\n    }\n  }, [focusedTest, isRecording, hasStartedTest]);\n\n  const hideRecordModal = () => {\n    navigate(\"/talent/tests\");\n    dispatch(toggleShowRecordingModal());\n  };\n\n  const handleCloseTerminate = () => {\n    navigate(\"/talent/tests\");\n    dispatch(toggleTestTerminated());\n  };\n\n  const handleCloseReportQuestion = (val) => {\n    dispatch(togglOpenReportModal(val));\n  };\n\n  const handleReportQuestion = () => {\n    let comment = ExtractFieldsFromFormData(report_form);\n\n    // console.log({comment})\n\n    let dataToSend = {\n      question:\n        questions[currentQuestion].id !== undefined\n          ? questions[currentQuestion].id\n          : \"\",\n      comment: comment.message,\n    };\n\n    dataToSend = JsonToformData(dataToSend);\n\n    dispatch(TalentReportQuestion({ data: dataToSend }))\n      .unwrap()\n      .then((res) => {\n        toast.success(\"Question has been reported\");\n        handleCloseReportQuestion(false);\n      })\n      .catch((err) => {\n        toast.error(err);\n      });\n  };\n\n  useEffect(() => {\n    // console.log({ focusedTest });\n\n    if (focusedTest.recording !== undefined) {\n      dispatch(toggleShowRecordingModal(focusedTest.recording));\n\n      if (!focusedTest.recording) {\n        dispatch(toggleStartedTestModal(true));\n      }\n    } else {\n    }\n  }, [focusedTest]);\n\n  useEffect(() => {\n    let testFinished = null;\n    const handleVisibilityChange = () => {\n      if (document.hidden && !testFinished) {\n        //return this after trouble shooting\n\n        if (process.env.NODE_ENV === \"production\" || process.env.NODE_ENV === \"development\") {\n          dispatch(toggleTestTerminated(true))\n          // handlePostMyAnswers();\n          dispatch(toggleTabHasChanged())\n        }\n\n        // Handle the visibility change event here\n      } else {\n      }\n    };\n\n    if (focusedTest.recording && isRecording && !testFinished) {\n      // console.log(\"added event\");\n\n      document.addEventListener(\"visibilitychange\", handleVisibilityChange);\n    }\n    if (postMyAnswersState.success) {\n      setTimeout(() => {\n        testFinished = true;\n      }, 1000);\n\n      document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n    }\n\n    return () => {\n      document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n    };\n  }, [isRecording, postMyAnswersState]);\n\n  useEffect(() => {\n    let test_validated = {};\n\n    test_validated = test_validation.filter((res) => {\n      return parseInt(res.skill__id) === parseInt(skillID);\n    });\n\n    // console.log(test_validated)\n\n    if (test_validated.length !== 0) {\n      SetTestValidated(test_validated[0]);\n    }else{\n      SetTestValidated({count:0});\n\n    }\n  }, [test_validation, skillID]);\n\n  return (\n    <>\n\n    {\n      !talentState.loading &&\n\n      <TalentLayout pageTitle=\"Tests\" pageHeaderRight={undefined}>\n      <ReportQuestionModal\n        reportFn={() => handleReportQuestion()}\n        dispatch={dispatch}\n        formData={report_form}\n        show={showReportQuestionModal}\n        onHide={() => handleCloseReportQuestion(false)}\n      ></ReportQuestionModal>\n      <TestTerminatedModal\n        onHide={handleCloseTerminate}\n        show={testTerminated}\n      />\n\n      {/* {DUMMY_DATA.tests[0].children[2].name} */}\n      <ConfirmationModal\n        loading={postMyAnswersState.loading}\n        isDanger={false}\n        show={showConfirmFinishTest}\n        message=\"Confirmation\"\n        message2=\"Are you sure you want to finish this test?\"\n        onHide={() => {\n          dispatch(toggleFinishTest(null));\n        }}\n        actionButtonFn={() => {\n          handlePostMyAnswers();\n        }}\n        confirmText=\"Yes, Finish\"\n        cancelText=\"Cancel\"\n      ></ConfirmationModal>\n\n      {questions.length !== 0 && (\n        <>\n          {TestValidated !== undefined ? (\n            TestValidated.count > 2 || TestValidated.count === 3 ? (\n              <ConfirmationModal\n                // message2={``}\n                isDanger={false}\n                show={true}\n                message={`Test attempt limit`}\n                onHide={() => {\n                  navigate(-1);\n                }}\n                actionButtonFn={() => {\n                  navigate(\"/talent/tests\");\n                }}\n                confirmText=\"Back to Tests\"\n                showCancelButton={false}\n                // cancelText=\"Cancel\"\n              >\n                <div className=\"alert alert-warning\">\n                You have already reached the maximum test limit {\n                    focusedSkill.hasOwnProperty(\"name\")\n                      ? `for ${focusedSkill.name}`\n                      : \"\"\n                  }. Kindly try again after 3 months.\n                <p className=\"text-muted\">\n                  Last test attempt was on {FormatDate(TestValidated[\"last-trial\"])} and status was {TestValidated.status}.\n                </p>\n                </div>\n              </ConfirmationModal>\n            ) : (\n              <>\n                <ConfirmationModal\n                  message2={`This test has a total of ${questions.length} questions and will take  (${focusedTest.duration}mins)`}\n                  isDanger={false}\n                  show={startTestModal}\n                  message={`${testID}`}\n                  onHide={() => {\n                    navigate(-1);\n                  }}\n                  actionButtonFn={() => {\n                    dispatch(toggleStartedTestModal());\n                    dispatch(toggleHasStartedTest(true));\n                  }}\n                  confirmText=\"Start\"\n                  cancelText=\"Cancel\"\n                ></ConfirmationModal>\n\n                <RecordCondirmModal\n                  message2={`This ${\n                    focusedSkill.hasOwnProperty(\"name\")\n                      ? `${focusedSkill.name}`\n                      : \"\"\n                  } test  has a total of ${\n                    questions.length\n                  } questions and will take  (${focusedTest.duration}mins)`}\n                  skill={focusedSkill}\n                  message={`${testID} ${\n                    focusedSkill.hasOwnProperty(\"name\")\n                      ? `- ${focusedSkill.name}`\n                      : \"\"\n                  }`}\n                  show={showRecordingModal}\n                  startRecording={() => {\n                    dispatch(toggleIsRecording());\n                    // dispatch(toggleHasStartedTest(true));\n                  }}\n                  onHide={() => hideRecordModal()}\n                />\n              </>\n            )\n          ) : (\n            \"\"\n          )}\n        </>\n      )}\n\n      {/* {JSON.stringify(questions[0].skill_picture)} */}\n      <AppBreadcrumb>\n        {links.map((link, index) => {\n          return (\n            <AppBreadcrumbItem\n              key={index}\n              active={link.active}\n              label={link.name}\n              to={link.to}\n            ></AppBreadcrumbItem>\n          );\n        })}\n      </AppBreadcrumb>\n\n      {/* {testID} */}\n\n      {postMyAnswersState.data.length === 0 ? ( // show only when user is not posting data to the backend\n        <WhiteBgDiv loading={skillByIDState.loading}>\n          <AppRow>\n            <AppCol size={12}>\n              {questions.length !== 0 ? (\n                <>\n                  <div className=\"float-start\">\n                    <h5>Can you solve this?</h5>\n                    {/* Current question is the question which the user is currently solving and this is an index is 0 || 1 || 2*/}\n                    {currentQuestion + 1}/{questions.length}\n                    {/* Show jump to questions in  select option */}\n                    {questionsAnswered.length > 0 && (\n                      <>\n                        <span\n                          className=\"text-muted\"\n                          style={{ marginLeft: 20 }}\n                        >\n                          Skip to question\n                        </span>\n                        <select\n                          style={{ marginLeft: 5 }}\n                          onChange={(e) =>\n                            dispatch(\n                              toggleNextQuestion(parseInt(e.target.value))\n                            )\n                          }\n                        >\n                          <option selected value=\"default\" disabled>\n                            Select a question\n                          </option>\n                          {questionsAnswered.map((qa, index) => {\n                            return (\n                              <option key={index} value={qa}>\n                                Q: {qa}\n                              </option>\n                            );\n                          })}\n                        </select>\n                      </>\n                    )}\n                  </div>\n\n                  <div className=\"float-end\">\n                    {focusedSkill.hasOwnProperty(\"name\") && (\n                      <>\n                        <AppImage\n                          style={{ height: 20, borderRadius: 10 }}\n                          image={\n                            focusedSkill !== undefined\n                              ? focusedSkill.picture\n                              : \"\"\n                          }\n                        ></AppImage>{\" \"}\n                        {focusedSkill.name}\n                      </>\n                    )}\n\n                    {hasStartedTest && (\n                      <AppTimer\n                        redux_timer={app_timer}\n                        timeDuration={focusedTest.duration}\n                      />\n                    )}\n                  </div>\n                </>\n              ) : (\n                <>\n                  {/* {JSON.stringify(focusedSkill)} */}\n                  {!skillByIDState.loading ? (\n                    <>\n                      {/* {focusedSkill.hasOwnProperty(\"gorilla_link\")} */}\n                      <EmptyData\n                        component3={\n                          <p>\n                            {`No tests  ${\n                              focusedSkill.hasOwnProperty(\"name\")\n                                ? `for ${focusedSkill.name}`\n                                : \"---\"\n                            }`}\n                          </p>\n                        }\n                        component2={\n                          focusedSkill.gorilla_link !== null ? (\n                            <div className=\"mb-5\">\n                              <br></br>\n                              <AppImage\n                                className=\"animate__animated animate__pulse mb-3\"\n                                style={{ height: 100 }}\n                                image={TEST_GORILLA_IMAGE}\n                              />\n\n                              <p>\n                                {/* {`No tests  ${\n                                  focusedSkill.hasOwnProperty(\"name\")\n                                    ? `for ${focusedSkill.name}`\n                                    : \"---\"\n                                }`} */}\n                                You'd be taking the test on the external site,\n                                TestGorilla.\n                              </p>\n\n                              <>\n                                <div className=\"alert alert-info\">\n                                  Be notified that by clicking the 'Redirect\n                                  me' button below will send you to the\n                                  TestGorilla website.\n                                  <br></br>\n                                  Make sure to register using your email,{\" \"}\n                                  {loginUserData.email}\n                                </div>\n                                <AppButton\n                                  size=\"small\"\n                                  isLink={true}\n                                  isExternalLink={true}\n                                  linkPath={focusedSkill.gorilla_link}\n                                >\n                                  <Globe /> Redirect me\n                                </AppButton>\n                              </>\n                              {/* <a className=\"\" href={focusedSkill.gorilla_link} target=\"_blank\">Redirect me</a> */}\n                            </div>\n                          ) : undefined\n                        }\n                        hasAction\n                        actionLabel={`Back to ${testID}`}\n                        linkPath={`/talent/tests/${testID}`}\n                        image={`${\n                          focusedSkill.hasOwnProperty(\"picture\") &&\n                          `${focusedSkill.picture}`\n                        }`}\n                        title={`No tests  ${\n                          focusedSkill.hasOwnProperty(\"name\")\n                            ? `for ${focusedSkill.name}`\n                            : \"---\"\n                        }`}\n                      ></EmptyData>\n                    </>\n                  ) : (\n                    <h6 className=\"text-center mt-5\">\n                      Please wait. Loading Skill ...\n                    </h6>\n                  )}\n                </>\n              )}\n            </AppCol>\n          </AppRow>\n\n          {questions.length !== 0 &&\n            questions !== null &&\n            questions !== undefined && (\n              <>\n                <SecondaryBackground>\n                  {showQuestions && (\n                    <CodeEditor\n                      readOnly\n                      unselectable=\"on\"\n                      className=\"unselectable\"\n                      disabled\n                      value={\n                        Array.isArray(questions) &&\n                        removeNumberBeginingOfText(\n                          questions[currentQuestion].question\n                        )\n                      }\n                      language={\n                        focusedSkill.hasOwnProperty(\"name\") &&\n                        focusedSkill.name\n                      }\n                      placeholder=\"...\"\n                      padding={20}\n                      style={{\n                        fontSize: 15,\n                        backgroundColor: SECONDARY_LIGHT_COLOR,\n                        color: GRAY_COLOR_ONE,\n                        fontFamily:\n                          \"ui-monospace,SFMono-Regular,SF Mono,Consolas,Liberation Mono,Menlo,monospace\",\n                      }}\n                    />\n                  )}\n                </SecondaryBackground>\n\n                {/* Display solutions */}\n                {questions !== false &&\n                  !showRecordingModal &&\n                  showQuestions &&\n                  Array.isArray(question_solution_answer) !== 0 && (\n                    <>\n                      {/* Show Report question */}\n\n                      <AppLink\n                        to=\"#\"\n                        onClick={() => handleCloseReportQuestion(true)}\n                      >\n                        Report Question\n                      </AppLink>\n                      <ProposedSolutions\n                        handleSelectQuestion={handleSelectQuestion}\n                        questions={questions}\n                        currentQuestion={currentQuestion}\n                        question_solution_answer={question_solution_answer}\n                      />\n                    </>\n                  )}\n                {/* End of solutions */}\n\n                {showQuestions && (\n                  <NextPreviousButton\n                    isLoading={postMyAnswersState.loading}\n                    handleFinish={() => dispatch(toggleFinishTest(true))}\n                    nextDisabled={\n                      Array.isArray(question_solution_answer) &&\n                      question_solution_answer !== undefined &&\n                      currentQuestionID !== \"default\"\n                        ? question_solution_answer.filter((q) => {\n                            return q.id === parseInt(currentQuestionID);\n                          })[0].selectedAnswer !== \"\"\n                          ? false\n                          : true\n                        : null\n                    }\n                    finishDisabled={\n                      Array.isArray(question_solution_answer) &&\n                      question_solution_answer !== undefined &&\n                      currentQuestionID !== \"default\"\n                        ? question_solution_answer.filter((q) => {\n                            return q.id === parseInt(currentQuestionID);\n                          })[0].selectedAnswer === \"\"\n                          ? true\n                          : false\n                        : null\n                    }\n                    currentQuestion={currentQuestion}\n                    count={questions.length}\n                    handleNext={() => dispatch(toggleNextQuestion())}\n                    handlePrevious={() => dispatch(togglePreviousQuestion())}\n                  />\n                )}\n              </>\n            )}\n        </WhiteBgDiv>\n      ) : (\n        <TestOutCome\n          test_outcome={postMyAnswersState.data}\n          path={`/talent/tests/${testID}`}\n          skillDetails={focusedSkill}\n        ></TestOutCome>\n      )}\n    </TalentLayout>\n    }\n     \n    </>\n  );\n}\n\nexport default TestStepThree;\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { TALENT_IMG } from \"../../../constants/AppImages\";\nimport { NAVLINKS } from \"../../../constants/navlinks\";\nimport { generateUniqueID } from \"../../../constants/utils\";\nimport AppButton from \"../../atoms/AppButton/AppButton\";\nimport LeftNavLink from \"../../molecules/LeftNavLink/LeftNavLink\";\nimport AppCol from \"../../organisms/AppCol/AppCol\";\nimport AppContainerFluid from \"../../organisms/AppContainerFluid/AppContainerFluid\";\nimport AppNavBar from \"../../organisms/AppNavBar/AppNavBar\";\nimport PagesHeader from \"../../organisms/PagesHeader/PagesHeader\";\nimport SideNavProfile from \"../../organisms/SideNavProfile/SideNavProfile\";\nimport LeftRightPage from \"../LeftRightPage/LeftRightPage\";\nimport { logOutUser } from \"../../../app-redux/features/Auth/authSlice\";\nimport ReferModal from \"../../organisms/ReferModal/ReferModal\";\nimport { toggleReferModal } from \"../../../app-redux/features/appData/appDataSlice\";\nimport AppMobileNav from \"../../organisms/AppMobileNav/AppMobileNav\";\nimport { Logout } from \"@mui/icons-material\";\n\nconst LeftNavComponent = ({ first_name, last_name, dispatch }) => {\n  return (\n    <>\n      <div>\n        <SideNavProfile isTalent={true} name={`${first_name} ${last_name}`} />\n        {NAVLINKS.available_for_job_link.map((leftNavLink, index) => {\n          return (\n            <LeftNavLink\n              key={generateUniqueID()}\n              style={{ borderRadius: 40, marginBottom: 40 }}\n              link={leftNavLink.link}\n              image={leftNavLink.image}\n              name={leftNavLink.name}\n            ></LeftNavLink>\n          );\n        })}\n        {NAVLINKS.talent_left_links.map((leftNavLink, index) => {\n          return (\n            <LeftNavLink\n              key={generateUniqueID()}\n              link={leftNavLink.link}\n              image={leftNavLink.image}\n              name={leftNavLink.name}\n            ></LeftNavLink>\n          );\n        })}\n\n        <AppButton\n          size=\"small\"\n          onClick={() => dispatch(logOutUser())}\n          style={{ backgroundColor: \"white\", color: \"black\" }}\n        >\n          <Logout /> Logout\n        </AppButton>\n      </div>\n    </>\n  );\n};\n\nfunction TalentLayout({\n  name_of_talent,\n  showLeftNav,\n  children,\n  pageTitle = \"\",\n  pageHeaderRight = undefined,\n  loading,\n}) {\n  const authData = useSelector((state) => state.auth);\n  const appData = useSelector((state) => state.appData);\n\n  let { loginUserState } = authData;\n  let { data: userData } = loginUserState;\n  let { first_name, last_name, phone, email } = userData;\n\n  const dispatch = useDispatch();\n  return (\n    <main>\n      {/* App top nav here */}\n      <AppMobileNav\n        component={\n          <LeftNavComponent\n            last_name={last_name}\n            first_name={first_name}\n            dispatch={dispatch}\n            loading={loading}\n          />\n        }\n        isInDashboard={true}\n      />\n      <AppNavBar\n        loading={loading}\n        navTileImage={TALENT_IMG}\n        navTileTitle={`${first_name} ${last_name}`}\n        rightLinks={NAVLINKS.dashboard_talent_right_links}\n        leftLinks={NAVLINKS.dashboard_talent_links}\n      />\n      <LeftRightPage\n        Left={\n          <LeftNavComponent\n            last_name={last_name}\n            first_name={first_name}\n            dispatch={dispatch}\n          ></LeftNavComponent>\n        }\n        Right={\n          <AppContainerFluid className=\"fluid_xl\">\n            <>\n              <AppCol size=\"12\">\n                <>\n                  {/* {JSON.stringify(pageHeaderRight)} */}\n                  {pageHeaderRight !== undefined ? (\n                    <PagesHeader\n                      RightComponent={pageHeaderRight}\n                      title={pageTitle}\n                    ></PagesHeader>\n                  ) : (\n                    <PagesHeader title={pageTitle}></PagesHeader>\n                  )}\n                  {children}\n                </>\n              </AppCol>\n            </>\n          </AppContainerFluid>\n        }\n      />\n      <ReferModal\n        message=\"Newton is the new thing on the block. We assist companies looking to hire tech talents or build teams by using our AI-powered platform and data-driven technology to get the best fitting for the role.\"\n        toggleFunction={() => dispatch(toggleReferModal())}\n        show={appData.showReferFriendModal}\n      />\n    </main>\n  );\n}\n\nexport default TalentLayout;\n","// extracted by mini-css-extract-plugin\nexport default {\"refer_modal\":\"ReferModal_refer_modal__9kP4g\",\"footerIcons\":\"ReferModal_footerIcons__kNf03\"};"],"names":["_ref","children","_jsx","className","classStyle","_ref$label","label","_ref$active","active","_ref$to","to","_Fragment","concat","NavLink","onClick","Link","undefined","style","textDecoration","message","message2","show","onHide","actionButtonFn","loading","confirmText","cancelText","_ref$isDanger","isDanger","_ref$showCancelButton","showCancelButton","_jsxs","Modal","scrollable","contentClassName","backdrop","keyboard","centered","LinearProgress","closeButton","TriangleAlert","AppButton","size","backgroundColor","DANGER_COLOR","PRIMARY_COLOR","SECONDARY_LIGHT_COLOR","color","_ref$message","_ref$hasAction","hasAction","actionLabel","linkPath","_ref$title","title","image","component","SecondaryButton","isLink","display","alignItems","flexDirection","AppImage","height","opacity","EMPTY_IMG","url","value","disabled","type","navigator","clipboard","writeText","toast","id","Copy","data","AppContainerFluid","CopyLinkInput","process","toggleFunction","refer_form_array","useSelector","state","appData","ReferModalBody","ReferModalFooter","shareTitle","_ref$shareUrl","shareUrl","_ref$quote","heading","quote","_ref$shareTitle","_ref$hashtags","hashtags","REFERALs","uuidv4","WhatsappShareButton","WhatsappIcon","round","FacebookShareButton","FacebookIcon","LinkedinShareButton","LinkedinIcon","TwitterShareButton","TwitterIcon","TelegramShareButton","TelegramIcon","InstapaperShareButton","InstapaperIcon","AppRow","classStyles","map","ref","test_outcome","skillDetails","path","pass_test","borderRadius","PARTYING_FACE_SVG","SAD_FACE_SVG","picture","name","currentQuestion","count","_ref$handleNext","handleNext","_ref$handlePrevious","handlePrevious","handleFinish","nextDisabled","finishDisabled","isLoading","AppCol","DARK_PRIMARY","questions","question_solution_answer","handleSelectQuestion","Array","isArray","length","ans","index","sm_size","xs_size","md_size","lg_size","AppDivButton","getSolutionAnswered","PRIMARY_COLOR_LIGHT","GRAY_COLOR_ONE","width","styles","text","skill","_useState","useState","_useState2","_slicedToArray","isMobile","SetIsMobile","questionData","postMyAnswersState","testTerminated","dispatch","useDispatch","_useReactMediaRecorde","useReactMediaRecorder","screen","audio","onStart","toggleIsRecording","toggleShowRecordingModal","onStop","e","fetch","then","r","blob","res","file_name","myFile","File","file","blobToFile","Date","data_to_post","JsonToformData","video","TalentRecordSkill","unwrap","setRecordBlob","startRecording","status","stopRecording","mediaBlobUrl","useEffect","success","test","userAgent","SECONDARY_COLOR","src","CHANGE_TAB","class","role","_ref$timeDuration","timeDuration","redux_timer","Ref","useRef","setTimer","startTimer","_getTimeRemaining","total","parse","seconds","Math","floor","minutes","hours","getTimeRemaining","toggleTimer","clearTimer","current","clearInterval","setInterval","getDeadTime","deadline","_seconds","setSeconds","getSeconds","onChangeForm","input_row","input_row_index","child_input","child_index","hidden","colums","FormInputRenderer","handleChange","metaData","meta","RowKey","ChildKey","input_type","inputId","formData","reportFn","ReportQuestForm","_e$target","target","handleOnChangeTextInput_Question_Slice","valueToUpdate","KeyName","navigate","useNavigate","_useParams","useParams","testID","skillID","TestValidated","SetTestValidated","effectskillID","skillData","loginUserData","auth","loginUserState","skillsState","skillByIDState","skillByIDData","talentState","TalentProfile","talentStateData","test_validation","hasOwnProperty","focusedSkill","questionsState","currentQuestionID","showRecordingModal","isRecording","showConfirmFinishTest","hasStartedTest","startTestModal","app_timer","questionsAnswered","showReportQuestionModal","report_form","getSkillByID","parseInt","getQuestions","skill_id","allquestions","AddSkillToResult","loadQuestionSolution","resetQuestion","toggleHasStartedTest","toggleFinishTest","handlePostMyAnswers","PostMyAnswers","quest_solutions","setOfflineLocalStorage","TALENT_ROUTE","showQuestions","updateCurrentQuestionID","links","focusedTest","DUMMY_DATA","t","_useState3","_useState4","SetShowQuestions","recording","handleCloseReportQuestion","val","togglOpenReportModal","toggleStartedTestModal","testFinished","handleVisibilityChange","document","toggleTestTerminated","toggleTabHasChanged","addEventListener","setTimeout","removeEventListener","test_validated","filter","skill__id","TalentLayout","pageTitle","pageHeaderRight","ReportQuestionModal","comment","ExtractFieldsFromFormData","dataToSend","question","TalentReportQuestion","catch","err","handleReportQuestion","TestTerminatedModal","ConfirmationModal","FormatDate","duration","RecordCondirmModal","AppBreadcrumb","link","AppBreadcrumbItem","WhiteBgDiv","marginLeft","onChange","toggleNextQuestion","selected","qa","AppTimer","EmptyData","component3","component2","gorilla_link","TEST_GORILLA_IMAGE","email","isExternalLink","Globe","SecondaryBackground","CodeEditor","readOnly","unselectable","removeNumberBeginingOfText","language","placeholder","padding","fontSize","fontFamily","AppLink","ProposedSolutions","question_id","solution_id","solIndex","selectAnswer","q","s","solutionIndex","NextPreviousButton","selectedAnswer","togglePreviousQuestion","TestOutCome","LeftNavComponent","first_name","last_name","SideNavProfile","isTalent","NAVLINKS","leftNavLink","LeftNavLink","marginBottom","generateUniqueID","logOutUser","Logout","_ref2","name_of_talent","showLeftNav","_ref2$pageTitle","_ref2$pageHeaderRight","authData","userData","phone","AppMobileNav","isInDashboard","AppNavBar","navTileImage","TALENT_IMG","navTileTitle","rightLinks","leftLinks","LeftRightPage","Left","Right","PagesHeader","RightComponent","ReferModal","toggleReferModal","showReferFriendModal"],"sourceRoot":""}