{"version":3,"file":"static/js/4950.d0bb7f21.chunk.js","mappings":"2PAmEA,MA5DA,SAA0BA,GAAY,IAATC,EAAID,EAAJC,KACrBC,GAAWC,EAAAA,EAAAA,MAEXC,EAAmB,SAACC,EAAGC,EAAUC,GACrC,IAAAC,EAA6BF,EAASG,KAA9BC,EAAMF,EAANE,OAAQC,EAAQH,EAARG,SAChBT,GACEU,EAAAA,EAAAA,IAAwB,CACtBC,MAAO,iBACPC,cAAeP,EACfG,OAAQA,EACRC,SAAAA,IAGN,EAEA,OACEI,EAAAA,EAAAA,KAAA,OAAAC,SAEGC,MAAMC,QAAQjB,IACbA,EAAKkB,KAAI,SAACC,EAAOC,GACf,OACEN,EAAAA,EAAAA,KAACO,EAAAA,QAAM,CAACC,UAAU,OAAMP,SACrBI,EAAMJ,SAASG,KAAI,SAACK,EAAOC,GAC1B,IAAqB,IAAjBD,EAAME,OACR,OACEX,EAAAA,EAAAA,KAACY,EAAAA,QAAM,CAACC,KAAM,GAAKR,EAAMS,OAAOb,UAC9BD,EAAAA,EAAAA,KAACe,EAAAA,EAAiB,CAChBC,iBAAkB,WAAO,EACzBC,aACiB,SAAfR,EAAMS,KAAkB7B,EAAmB,CAAC,EAE9C6B,KAAMT,EAAMS,KACZ3B,SAAU,CACRG,KAAM,CAAEC,OAAQW,EAAYV,SAAUc,GACtCS,MAAOV,EAAMU,MACbC,MAAOX,EAAMW,MACbC,KAAMZ,EAAMY,KACZC,WAAYb,EAAMa,WAClBC,QAAS,wBACTrC,KAAMuB,EAAMvB,KACZsC,UAAW,OACXC,MAAO,QACPP,KAAMT,EAAMa,WACZI,WAAYjB,EAAMiB,WAClBC,UAAWlB,EAAMkB,UACjBC,SAAUnB,EAAMmB,SAChBC,OAAO,YArByBpB,EAAMqB,GA2BlD,KA/B4BzB,EAAMyB,GAkCxC,KAGR,E,sDCfA,MArCA,WACE,IACQC,GADMC,EAAAA,EAAAA,KAAY,SAAClC,GAAK,OAAKA,EAAMmC,KAAK,IACxCF,4BACF5C,GAAWC,EAAAA,EAAAA,MAsBjB,OACEY,EAAAA,EAAAA,KAACkC,EAAAA,EAAa,CAACC,UAAU,4BAA2BlC,UAClDmC,EAAAA,EAAAA,MAACC,EAAAA,EAAU,CAAApC,SAAA,EACTD,EAAAA,EAAAA,KAACsC,EAAiB,CAACpD,KAAM6C,KACzB/B,EAAAA,EAAAA,KAACuC,EAAAA,EAAS,CAACC,QAAS,kBAxBL,WACnB,IAAItD,GAAOuD,EAAAA,EAAAA,IAA0BV,GACrC7C,GAAOwD,EAAAA,EAAAA,IAAexD,GAEtBC,GAASwD,EAAAA,EAAAA,IAAsBzD,IAC5B0D,SACAC,MAAK,SAACC,GACLC,EAAAA,GAAAA,QAAc,QAChB,IACCC,OAAM,SAACC,GAEa,MAAfA,EAAIC,OACNH,EAAAA,GAAAA,MAAY,oCAEZA,EAAAA,GAAAA,MAAYE,EAAI/D,KAGpB,GACJ,CAMgCiE,EAAc,EAAEtC,KAAK,QAAOZ,SAAC,eAM/D,C","sources":["components/pages/company/CompanyGorillaTest/GorillaResultForm.js","components/pages/company/CompanyGorillaTest/UploadGorillaResult.js"],"sourcesContent":["import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport AppCol from \"../../../organisms/AppCol/AppCol\";\nimport AppRow from \"../../../organisms/AppRow/AppRow\";\nimport FormInputRenderer from \"../../../organisms/FormRenderer/FormInputRenderer\";\nimport { handleOnChangeFileInput } from \"../../../../app-redux/features/Skill/skillSlice\";\n\nfunction GorillaResultForm({ data }) {\n  const dispatch = useDispatch();\n\n  const handleFileChange = (e, metaData, file) => {\n    const { RowKey, ChildKey } = metaData.meta;\n    dispatch(\n      handleOnChangeFileInput({\n        state: \"gorilla_result\",\n        valueToUpdate: file,\n        RowKey: RowKey,\n        ChildKey,\n      })\n    );\n  };\n\n  return (\n    <div>\n      {/* {JSON.stringify(data)} */}\n      {Array.isArray(data) &&\n        data.map((bio_1, form_index) => {\n          return (\n            <AppRow className=\"gx-5\" key={bio_1.id}>\n              {bio_1.children.map((bio_2, child_index) => {\n                if (bio_2.hidden !== true) {\n                  return (\n                    <AppCol size={12 / bio_1.colums} key={bio_2.id}>\n                      <FormInputRenderer\n                        onBlurValidation={() => {}}\n                        handleChange={\n                          bio_2.type === \"file\" ? handleFileChange : {}\n                        }\n                        type={bio_2.type}\n                        metaData={{\n                          meta: { RowKey: form_index, ChildKey: child_index },\n                          label: bio_2.label,\n                          value: bio_2.value,\n                          name: bio_2.name,\n                          input_type: bio_2.input_type,\n                          inputId: \"settings_input_fields\",\n                          data: bio_2.data,\n                          valueName: \"name\",\n                          valId: \"valId\",\n                          type: bio_2.input_type,\n                          isRequired: bio_2.isRequired,\n                          maxlength: bio_2.maxlength,\n                          disabled: bio_2.disabled,\n                          accept:\".xlsx\"\n                        }}\n                      ></FormInputRenderer>\n                    </AppCol>\n                  );\n                }\n              })}\n            </AppRow>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default GorillaResultForm;\n","import React from \"react\";\nimport GorillaResultForm from \"./GorillaResultForm\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport CompanyLayout from \"../../../templates/CompanyLayout/CompanyLayout\";\nimport AppButton from \"../../../atoms/AppButton/AppButton\";\nimport WhiteBgDiv from \"../../../organisms/WhiteBgDiv/WhiteBgDiv\";\nimport { uploadTestGorillaTest } from \"../../../../app-redux/features/Skill/skillSlice\";\nimport { toast } from \"react-toastify\";\nimport {\n  ExtractFieldsFromFormData,\n  JsonToformData,\n} from \"../../../../constants/utils\";\n\nfunction UploadGorillaResult() {\n  const skill = useSelector((state) => state.skill);\n  const { staff_upload_gorilla_result } = skill;\n  const dispatch = useDispatch();\n\n  const handleUpload = () => {\n    let data = ExtractFieldsFromFormData(staff_upload_gorilla_result);\n    data = JsonToformData(data);\n\n    dispatch(uploadTestGorillaTest(data))\n      .unwrap()\n      .then((res) => {\n        toast.success(\"Done!\");\n      })\n      .catch((err) => {\n        // console.log(err)\n        if (err.status === 500) {\n          toast.error(\"There is an error with your file\");\n        } else {\n          toast.error(err.data);\n        }\n        // toast.error(err)\n      });\n  };\n\n  return (\n    <CompanyLayout pageTitle=\"Upload TestGorilla Result\">\n      <WhiteBgDiv>\n        <GorillaResultForm data={staff_upload_gorilla_result} />\n        <AppButton onClick={() => handleUpload()} size=\"small\">\n          Submit\n        </AppButton>\n      </WhiteBgDiv>\n    </CompanyLayout>\n  );\n}\n\nexport default UploadGorillaResult;\n"],"names":["_ref","data","dispatch","useDispatch","handleFileChange","e","metaData","file","_metaData$meta","meta","RowKey","ChildKey","handleOnChangeFileInput","state","valueToUpdate","_jsx","children","Array","isArray","map","bio_1","form_index","AppRow","className","bio_2","child_index","hidden","AppCol","size","colums","FormInputRenderer","onBlurValidation","handleChange","type","label","value","name","input_type","inputId","valueName","valId","isRequired","maxlength","disabled","accept","id","staff_upload_gorilla_result","useSelector","skill","CompanyLayout","pageTitle","_jsxs","WhiteBgDiv","GorillaResultForm","AppButton","onClick","ExtractFieldsFromFormData","JsonToformData","uploadTestGorillaTest","unwrap","then","res","toast","catch","err","status","handleUpload"],"sourceRoot":""}