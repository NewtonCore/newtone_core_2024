{"version":3,"file":"static/js/9152.ad86371b.chunk.js","mappings":"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","sources":["components/organisms/MeetingConfirmedModal/MeetingConfirmedModal.js","components/pages/company/CompanyScheduleCall/CompanyScheduleCall.js"],"sourcesContent":["import React from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport AppButton from \"../../atoms/AppButton/AppButton\";\n\nfunction MeetingConfirmedModal({\n  show,\n  onHide,\n  actionButtonFn,\n}) {\n  return (\n    <div>\n      <Modal\n        scrollable\n        contentClassName=\"\"\n        show={show}\n        onHide={onHide}\n        centered\n      >\n        <Modal.Header closeButton>\n        <span className=\"ms-auto\">\n        Meeting Confirmed\n\n          </span>\n          </Modal.Header>\n\n        <Modal.Body>\n\n          <center>\n            <p>\n                Details about the meeting has been sent to your email.\n            </p>\n          <AppButton\n            size=\"small\"\n            onClick={actionButtonFn}\n            label=\"Return to Dashboard\"\n          ></AppButton>\n          </center>\n        </Modal.Body>\n      </Modal>\n    </div>\n  );\n}\n\nexport default MeetingConfirmedModal;\n","import { LinearProgress } from \"@mui/material\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport AppButton from \"../../../atoms/AppButton/AppButton\";\nimport AppCol from \"../../../organisms/AppCol/AppCol\";\nimport AppContainerFluid from \"../../../organisms/AppContainerFluid/AppContainerFluid\";\nimport AppRow from \"../../../organisms/AppRow/AppRow\";\nimport WhiteBgDiv from \"../../../organisms/WhiteBgDiv/WhiteBgDiv\";\nimport CompanyLayout from \"../../../templates/CompanyLayout/CompanyLayout\";\nimport {\n  BLACK_COLOR,\n  PRIMARY_COLOR,\n  PRIMARY_COLOR_LIGHT,\n  SECONDARY_LIGHT_COLOR,\n} from \"../../../../constants/AppColors\";\n\nimport {\n  FormatDate,\n  FormatToDateFormat,\n  JsonToformData,\n} from \"../../../../constants/utils\";\nimport {\n  ScheduleInterview,\n  toggleShowMeetingScheduledModal,\n} from \"../../../../app-redux/features/ScheduleInterview/ScheduleInterviewSlice\";\nimport MeetingConfirmedModal from \"../../../organisms/MeetingConfirmedModal/MeetingConfirmedModal\";\nimport { toast } from \"react-toastify\";\nimport { COMPANY_ROUTE } from \"../../../../routes/RouteLinks\";\nimport { useNavigate } from \"react-router-dom\";\nimport { DateCalendar, LocalizationProvider } from \"@mui/x-date-pickers\";\nimport { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\nimport dayjs from \"dayjs\";\nfunction CompanyScheduleCall() {\n  let dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const ScheduleInterviewNewton = useSelector(\n    (state) => state.ScheduleInterviewNewton\n  );\n  const {\n    newtonAvailabilityState,\n    showMeetingScheduled,\n    ScheduleInterviewState,\n  } = ScheduleInterviewNewton;\n\n  const [dayOfWeek, SetDayOfWeek] = useState(new Date().getDay());\n  const [dateSelected, SetDateSelected] = useState(new Date());\n\n  const [timeSelected, SelectTime] = useState(undefined);\n\n  const [schedule_times, Setschedule_times] = useState([]);\n  const [excludes_time, SetExcludes_times] = useState([]);\n\n\n  const ScheduleInterviewFn = () => {\n    // console.log(dateSelected.toString())\n    // return 0\n\n    let timezone = dateSelected.toString().match(/([A-Z]+[\\+-][0-9]+.*)/)[1];\n\n    // return 0\n    dispatch(\n      ScheduleInterview(\n        JsonToformData({\n          date: FormatToDateFormat(dateSelected, \"yyyy-MM-dd\"),\n          time: timeSelected,\n          time_zone: timezone,\n        })\n      )\n    )\n      .unwrap()\n      .then((res) => {\n        dispatch(toggleShowMeetingScheduledModal());\n        // toast.success(`Success`, { autoClose: 2000 });\n      })\n\n      .catch((error) => {\n        // console.log(error)\n        // console.error(error)\n        toast.warning(`${error}`, { autoClose: 2000 });\n      });\n  };\n\n  const getNewtonAvailabilityFn = (e) => {\n    // console.log(new Date(e))\n    SetDayOfWeek(new Date(e).getDay(e));\n    SetDateSelected(new Date(e));\n  };\n\n  const navigateToDashboard = () => {\n    navigate(`/${COMPANY_ROUTE.index}${COMPANY_ROUTE.dashboard}`);\n    dispatch(toggleShowMeetingScheduledModal());\n  };\n\n  useEffect(() => {\n    SelectTime(undefined);\n    {\n      dayOfWeek !== undefined &&\n      newtonAvailabilityState.data.hasOwnProperty(\"availabilities\")\n        ? Setschedule_times(\n            newtonAvailabilityState.data[\"availabilities\"].filter((data) => {\n              return data.week_day === parseInt(dayOfWeek);\n            })\n          )\n        : Setschedule_times([]);\n    }\n  }, [dayOfWeek, newtonAvailabilityState]);\n  useEffect(() => {\n    SetDateSelected(new Date());\n    SetDayOfWeek(parseInt(new Date().getDay()));\n  }, []);\n\n  // console.log(schedule_times);\n  return (\n    <CompanyLayout pageTitle=\"Schedule a call with us\">\n      {ScheduleInterviewState.loading && <LinearProgress />}\n      <MeetingConfirmedModal\n        actionButtonFn={() => navigateToDashboard()}\n        show={showMeetingScheduled}\n        onHide={() => dispatch(toggleShowMeetingScheduledModal())}\n      />\n      <WhiteBgDiv>\n        <>\n          <AppRow>\n            <AppCol size={6} md_size={12} lg_size={8} sm_size={12} xs_size={12}>\n              {/* {JSON.stringify(newtonAvailabilityState)} */}\n\n              <div className=\"border border-2 rounded-3\">\n                <LocalizationProvider dateAdapter={AdapterDayjs}>\n                  <DateCalendar\n                    // orientation=\"landscape\"\n                    // showDaysOutsideCurrentMonth\n                    fixedWeekNumber={6}\n                    defaultValue={dayjs(new Date())}\n                    onChange={(e) => getNewtonAvailabilityFn(e)}\n                    disablePast\n                  />\n                </LocalizationProvider>\n              </div>\n            </AppCol>\n            <AppCol size={6} md_size={12} lg_size={4} sm_size={12} xs_size={12}>\n              {dayOfWeek === undefined ? (\n                <>\n                  <span className=\"text-muted\">Select a day of the week</span>\n                </>\n              ) : (\n                <>\n                  <AppRow className=\"mb-5 mt-3\">\n                    {schedule_times.length !== 0 ? (\n                      <>\n                        <span className=\"text-muted mb-3\">\n                          * Select a preferred time for{\" \"}\n                          {FormatDate(dateSelected)}\n                        </span>\n\n                        {schedule_times[0].data.map((val) => {\n                          return (\n                            <AppCol\n                              key={val.id}\n                              size={4}\n                              md_size={4}\n                              lg_size={6}\n                              sm_size={4}\n                              xs_size={6}\n                            >\n                              <AppButton\n                                disabled={ScheduleInterviewState.loading}\n                                onClick={() => SelectTime(val.time)}\n                                backgroundColor={\n                                  timeSelected === val.time\n                                    ? PRIMARY_COLOR_LIGHT\n                                    : SECONDARY_LIGHT_COLOR\n                                }\n                                //  color=\"black\"\n                                style={{\n                                  color:\n                                    timeSelected === val.time\n                                      ? BLACK_COLOR\n                                      : BLACK_COLOR,\n                                  borderWidth: 1,\n                                  borderColor: PRIMARY_COLOR,\n                                  fontSize: 10,\n                                }}\n                                key={val.id}\n                              >\n                                {/* {timeSelected === val.time &&\n                               <CheckCircle fontSize=\"10\" style={{color:PRIMARY_COLOR}}/>\n                               }   */}\n\n                                {val.time}\n                              </AppButton>\n                            </AppCol>\n                          );\n                        })}\n                        <AppContainerFluid>\n                          <AppButton\n                            disabled={\n                              dateSelected === undefined ||\n                              timeSelected === undefined\n                            }\n                            loading={ScheduleInterviewState.loading}\n                            onClick={() => ScheduleInterviewFn()}\n                            label=\"Schedule Call\"\n                          ></AppButton>\n                        </AppContainerFluid>\n                      </>\n                    ) : (\n                      <>\n                        <div class=\"alert alert-warning\" role=\"alert\">\n                          Sorry. Cannot schedule meeting on{\" \"}\n                          {FormatDate(dateSelected)}\n                        </div>\n                      </>\n                    )}\n                  </AppRow>\n                </>\n              )}\n            </AppCol>\n          </AppRow>\n        </>\n      </WhiteBgDiv>\n    </CompanyLayout>\n  );\n}\n\nexport default CompanyScheduleCall;\n"],"names":["_ref","show","onHide","actionButtonFn","_jsx","children","_jsxs","Modal","scrollable","contentClassName","centered","closeButton","className","AppButton","size","onClick","label","dispatch","useDispatch","navigate","useNavigate","ScheduleInterviewNewton","useSelector","state","newtonAvailabilityState","showMeetingScheduled","ScheduleInterviewState","_useState","useState","Date","getDay","_useState2","_slicedToArray","dayOfWeek","SetDayOfWeek","_useState3","_useState4","dateSelected","SetDateSelected","_useState5","undefined","_useState6","timeSelected","SelectTime","_useState7","_useState8","schedule_times","Setschedule_times","_useState9","_useState10","useEffect","data","hasOwnProperty","filter","week_day","parseInt","CompanyLayout","pageTitle","loading","LinearProgress","MeetingConfirmedModal","concat","COMPANY_ROUTE","toggleShowMeetingScheduledModal","WhiteBgDiv","_Fragment","AppRow","AppCol","md_size","lg_size","sm_size","xs_size","LocalizationProvider","dateAdapter","AdapterDayjs","DateCalendar","fixedWeekNumber","defaultValue","dayjs","onChange","e","getNewtonAvailabilityFn","disablePast","length","FormatDate","map","val","disabled","time","backgroundColor","PRIMARY_COLOR_LIGHT","SECONDARY_LIGHT_COLOR","style","color","BLACK_COLOR","borderWidth","borderColor","PRIMARY_COLOR","fontSize","id","AppContainerFluid","timezone","toString","match","ScheduleInterview","JsonToformData","date","FormatToDateFormat","time_zone","unwrap","then","res","catch","error","toast","autoClose","ScheduleInterviewFn","class","role"],"sourceRoot":""}